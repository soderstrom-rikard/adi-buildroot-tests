#!/usr/bin/expect
#
# Test SD/MMC driver on target board;
#
# Prepare SD card as follow:
# p1 is the boot partition(fat32)
# p2(fat32) and p3(ext2) are for testing
#
# Usage:
#   ./sd_test.exp board_type
#
# Example:
#   ./sd_test.exp beagle
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
source ../common/kernel_boot.exp

step "Start testing"
set FILE_SIZE 10
set DOS_PAR "/dev/mmcblk0p2"
set EXT_PAR "/dev/mmcblk0p3"

incr case_num
set timeout 5
send "ls /dev/mmcblk0p*\r"
while 1 {
    expect {
        -re "mmcblk0p2.*mmcblk0p3.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "Fail: no SD card is detected\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "time mkdosfs -F 32 $DOS_PAR\r"
while 1 {
    expect {
        -re "No such .*$kernel_prompt" {
            case_fail $case_num
        }
        -re "mkdosfs \[0-9]\.\[0-9]+.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "mkdosfs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t vfat $DOS_PAR /mnt\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount DOS FS timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 60
send "time dd conv=fsync if=/dev/zero of=/mnt/$FILE_SIZE.bin bs=1M count=$FILE_SIZE\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            break
        }
        timeout {
            send_user "Generate a $FILE_SIZE MB file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/$FILE_SIZE.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

sleep 1
set timeout 5
send "ls /mnt\r"
while 1 {
    expect {
        -re "$FILE_SIZE.bin" {
            send_user "Generate a $FILE_SIZE MB file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "List $FILE_SIZE MB file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "umount /mnt\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount DOS FS timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 120
send "mke2fs $EXT_PAR\r"
while 1 {
    expect {
        -re "Writing superblocks and filesystem accounting information: done.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "mke2fs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t ext2 $EXT_PAR /mnt\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount EXT2 FS timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 60
send "time dd conv=fsync if=/dev/zero of=/mnt/$FILE_SIZE.bin bs=1M count=$FILE_SIZE\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate a $FILE_SIZE MB file in mmc1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/$FILE_SIZE.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

sleep 2
incr case_num
set timeout 5
send "rm /mnt/$FILE_SIZE.bin\r"
while 1 {
    expect {
        -re "rm:.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "rm timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "umount /mnt\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount /mnt/mmc1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
