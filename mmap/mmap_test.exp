#!/usr/bin/expect

source  ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../common/spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../common/reboot_kernel.exp

step "Start testing."
set case_num 0
sleep 5
send "\r"
expect -re $kernel_prompt

incr case_num
send "ifconfig eth0 $targetip up\r"
set timeout 30
while 1 {
    expect {
        -re $kernel_prompt {
            send "\r"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5
send "ifconfig eth0\r"
set timeout 60
while 1 {
    expect {
        -re "$targetip.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 60
spawn rcp mmap_test_load root@$targetip:/
while 1 {
    expect {
        -re "connect|No route to host|No such file or directory" {
            case_fail $case_num
        }
        eof {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
            break
        }
    }
}

incr case_num
set timeout 60
spawn rcp  mmap_test_unload root@$targetip:/
while 1 {
    expect {
        -re "connect|No route to host|No such file or directory" {
            case_fail $case_num
        }
        eof {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
            break
        }
    }
}

set spawn_id $kermit_spawn_id

# insert simple mod for the first time.

incr case_num
send "./mmap_test_load\r"
while 1 {
    expect {
        -re "(fail|No such file or directory|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "lsmod\r" 
while 1 {
    expect {
        -re "simple.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "ls -l /dev/simpler\r" 
while 1 {
    expect {
        -re "crw-rw-r--.*0.*simpler.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "./mmap_test_unload\r"
while 1 {
    expect {
        -re "(fail|No such file or directory|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "lsmod\r" 
while 1 {
    expect {
        -re "simple.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "ls -l /dev/simple*\r" 
while 1 {
    expect {
        -re "simpler" {
            case_fail $case_num
        }
        -re "No such file or directory" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

# insert simple mod for the second time.
send "./mmap_test_load\r"
while 1 {
    expect {
        -re "(fail|No such file or directory|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "lsmod\r" 
while 1 {
    expect {
        -re "simple.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "ls -l /dev/simpler\r" 
while 1 {
    expect {
        -re "crw-rw-r--.*0.*simpler.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2
step "Clean src directory\n"
spawn make clean
while 1 {
   expect {

      "*error*" {
         send_log "\nMake clean failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nMake clean.\n"
         send_user "\nMake clean.\n"
         break
      }

      timeout {
         break
      }
   }
}

step "Build test program\n"
spawn make
while 1 {
   expect {

      "*error*" {
         send_log "\nBuild test program failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nBuild test program done\n"
         case_pass $case_num
         break
      }

      timeout {
         break
      }
   }
}

set spawn_id $kermit_spawn_id

spawn rcp test_simple root@$targetip:/.
while 1 {
   expect {

      "*connect*" {
         send_log "\nCopy test_simple to target board failed\n"
         case_pass $case_num
      }

      eof {
         send_log "\nCopy test_simple to target board done\n"
         send_user "\nCopy test_simple to target board done\n"
         break
      }

      timeout {
         break
      }
   }
}

set spawn_id $kermit_spawn_id

for {set t 0} {$t < 3} {incr t} {
incr case_num
set timeout 15
send "/test_simple\r"
while 1 {
   expect {

      -re "FAIL|can't" {
         send_log "\nTest mmap fail\n"
         case_fail $case_num
      }

      -re "succeed" {
         send_log "\nTest mmap ends.\n"
         case_pass $case_num
         break
      }
      timeout {
         send_log "\nTest mmap timeout.\n"
         case_fail $case_num
         break
      }
   }
}
}

all_pass
send_user "Ending $argv0\n"
log_file
