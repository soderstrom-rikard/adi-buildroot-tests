#!/usr/bin/expect --
#
# Build script for USB host power test
#
# Usage:
#   ./build_power_usbhost_kernel.exp board_type musb_mode
#
# Example:
#   ./build_power_usbhost_kernel.exp BF609-EZKIT dma
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, musb_mode(pio or dma)"
    exit
}
set musb_mode [lindex $argv 1]
set log_name build_power_usbhost_${musb_mode}_kernel_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### Build kernel in $musb_mode mode. ####\n"

set env(EXT2_BLOCKS) "16384"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make ARCH=$arch linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

#Power Management
        -re "Suspend to RAM and standby.*SUSPEND.*\\\[.*]" {
            send "Y\r"
        }

# Disable some drivers as PM is not well supported
        -re "Memory Technology Device \\\(MTD\\\) support \\\(MTD\\\) \\\[.*]" {
            send "N\r"
        }

# Storage support
        -re "SCSI device support \\\(SCSI\\\).*\\\[./././.]" {
            if { [string match "BF527-EZKIT*" $board_type] } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "SCSI disk support.*BLK_DEV_SD.*\\\[.*]" {
            send "Y\r"
        }

# USB support
        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "Y\r"
        }

        -re "USB device class-devices.*USB_DEVICE_CLASS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Inventra Highspeed Dual Role Controller.*USB_MUSB_HDRC.*\\\[.*]" {
            send "Y\r"
        }

        -re "Platform Glue Layer \\\[.*]" {
            send "Y\r"
        }

        -re " (\[0-9]+). Blackfin.*USB_MUSB_BLACKFIN.*\[cC]hoice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re " (\[0-9]+). Inventra.*USB_INVENTRA_DMA.* (\[0-9]+). Disable DMA.*MUSB_PIO_ONLY.*\[cC]hoice.*\\\[.*]" {
            if { $musb_mode == "dma" } {
                send "$expect_out(1,string)\r"
            } elseif { $musb_mode == "pio" } {
                send "$expect_out(2,string)\r"
            } else {
                send "\r"
            }
        }

        -re "USB Gadget Support.*USB_GADGET.*\\\[.*]" {
            send "Y\r"
        }

        -re "USB Peripheral Controller \\\[.*]" {
            send "Y\r"
        }

        -re "USB Peripheral Controller.*(\[0-9]+). Inventra HDRC USB Peripheral.*USB_GADGET_MUSB_HDRC.*\[cC]hoice\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "USB Gadget Drivers \\\[.*]" {
            send "Y\r"
        }

        -re "USB Gadget Drivers.* (\[0-9]+). Gadget Zero.*USB_ZERO.*\[cC]hoice\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "USB Mass Storage support.*USB_STORAGE.*\\\[.*]" {
            send "Y\r"
        }

# File system config
        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT.*Windows-95.*fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[*]" {
            send "437\r"
        }

        -re "Default iocharset for FAT \\\(FAT_DEFAULT_IOCHARSET\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

# Native language support
        -re "Default NLS Option \\\(NLS_DEFAULT\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[./././.]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[./././.]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "ethtool.*BR2_PACKAGE_ETHTOOL.*\\\[.*]" {
            send "Y\r"
        }

        -re "bonnie\\\+\\\+.*BR2_PACKAGE_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
