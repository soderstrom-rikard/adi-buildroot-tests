#!/usr/bin/expect
#
# Power management test for usb host
#
# Usage:
#   ./power_usbhost_test.exp board_type pm_state
#
# Example:
#   ./power_usbhost_test.exp BF609-EZKIT standby
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, pm_state (standby or mem)"
    exit
}
set pm_state [lindex $argv 1]
set TITLE [title "$argv0"]
append TITLE " ($pm_state)"
set log_name power_usbhost_${pm_state}_test_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### Power management state is $pm_state. ####\n"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../common/kernel_boot.exp

set sleep_time 15
set wakeup_fail 0
set sleep_pattern "Syncing filesystems.*Freezing user space processes \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nFreezing remaining freezable tasks \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nSuspending console\\\(s\\\) \\\(use no_console_suspend to debug\\\)"
set wakeup_pattern "Restarting tasks.*done"


proc pm_test_case1_reset {} {
    global case_num
    global kernel_prompt
    global wakeup_fail
    global pm_state
    global sleep_pattern
    global wakeup_pattern
    global host_spawn_id
    global kermit_spawn_id
    global spawn_id
    global usb_dev1

    set timeout 5
    incr case_num
    send "echo $pm_state > /sys/power/state\r"
    while 1 {
        expect {
            -re $sleep_pattern {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Test case 1: Sleep fail\n"
                case_fail $case_num
            }
        }
    }

    sleep 10

    set spawn_id $host_spawn_id

    set timeout 5
    incr case_num
    send "reset_board 4\r"
    while 1 {
        expect {
            -re "powering ON board attached to printer port pin 4" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    set spawn_id $kermit_spawn_id

    set timeout 20
    incr case_num
    while 1 {
        expect {
            -nocase -re "fail|error" {
                expect -re $kernel_prompt
                send_user "Test case 1: Wake up fail\n"
                incr wakeup_fail
                break
            }
            -re $wakeup_pattern {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Test case 1: Wake up fail\n"
                incr wakeup_fail
                break
            }
        }
    }

    set timeout 10
    expect -re $kernel_prompt
    expect -re "Attached SCSI removable disk"

    sleep 5
    incr case_num
    set timeout 5
    send "mount -t ext2 /dev/$usb_dev1 /mnt\r"
    while 1 {
        expect {
            -re "(mount:|\[fF]ail|\[eE]rror).*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 5
    send "mount\r"
    while 1 {
        expect {
            -re "/dev/$usb_dev1 on /mnt type ext2.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 30
    send "time dd conv=fsync if=/dev/zero of=/mnt/5m.bin bs=1M count=5\r"
    while 1 {
        expect {
            -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    set timeout 30
    incr case_num
    send "time cat /mnt/5m.bin > /dev/null\r"
    while 1 {
        expect {
            -re "real.*user.*sys.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    sleep 2
    incr case_num
    set timeout 5
    send "rm /mnt/5m.bin; sync\r"
    while 1 {
        expect {
            -re "rm:.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    send "umount /mnt\r"
    while 1 {
        expect {
            -re "umount:.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    send "ls /mnt\r"
    while 1 {
        expect {
            -re "lost+found.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

proc pm_test_case1_rtcwake {} {
    global case_num
    global kernel_prompt
    global sleep_time
    global wakeup_fail
    global pm_state
    global sleep_pattern
    global wakeup_pattern
    global usb_dev1

    set timeout [expr $sleep_time + 10]
    incr case_num
    send "\nrtcwake -s $sleep_time -m $pm_state\r"
    while 1 {
        expect {
            -nocase -re "fail|error" {
                expect -re $kernel_prompt
                send_user "Test case 1: Wake up fail\n"
                incr wakeup_fail
                break
            }
            -re "$sleep_pattern.*$wakeup_pattern" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Test case 1: Wake up fail\n"
                incr wakeup_fail
                break
            }
        }
    }

    set timeout 10
    expect -re $kernel_prompt
    expect -re "Attached SCSI removable disk"

    incr case_num
    set timeout 60
    send "time mount -t ext2 /dev/$usb_dev1 /mnt\r"
    send "\r"
    while 1 {
        expect {
            -re "(mount:|\[fF]ail|\[eE]rror).*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 5
    send "mount\r"
    while 1 {
        expect {
            -re "/dev/$usb_dev1 on /mnt type ext2.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 30
    send "time dd conv=fsync if=/dev/zero of=/mnt/5m.bin bs=1M count=5\r"
    while 1 {
        expect {
            -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    set timeout 30
    incr case_num
    send "time cat /mnt/5m.bin > /dev/null\r"
    while 1 {
        expect {
            -re "real.*user.*sys.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    sleep 2
    incr case_num
    set timeout 5
    send "rm /mnt/5m.bin; sync\r"
    while 1 {
        expect {
            -re "rm:.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    send "umount /mnt\r"
    while 1 {
        expect {
            -re "umount:.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    send "ls /mnt\r"
    while 1 {
        expect {
            -re "lost+found.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

step "Start testing"
set case_num 0
set Total_Count 5

set timeout 15
expect -re "Up.*Full"
send "\r"
expect -re $kernel_prompt

set usb_dev sda
set usb_dev1 sda1
set usb_dev2 sda2

incr case_num
set timeout 5
send "dmesg|grep -i sd\r"
while 1 {
    expect {
        -re "$usb_dev.*$usb_dev1 $usb_dev2.*Attached SCSI removable disk.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5
incr case_num
set timeout 120
send "mke2fs /dev/$usb_dev1\r"
while 1 {
    expect {
        -nocase -re "(mke2fs:|fail|error).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Filesystem.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t ext2 /dev/$usb_dev1 /mnt\r"
while 1 {
    expect {
        -re "(mount:|\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount\r"
while 1 {
    expect {
        -re "/dev/$usb_dev1 on /mnt type ext2.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 30
send "time dd conv=fsync if=/dev/zero of=/mnt/5m.bin bs=1M count=5\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 30
incr case_num
send "time cat /mnt/5m.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 2
incr case_num
set timeout 5
send "rm /mnt/5m.bin; sync\r"
while 1 {
    expect {
        -re "rm:.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "umount /mnt\r"
while 1 {
    expect {
        -re "umount:.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "ls /mnt\r"
while 1 {
    expect {
        -re "lost+found.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/mounts\r"
while 1 {
    expect {
        -re "sysfs /sys sysfs rw,nosuid,nodev,noexec.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "ls /sys/power\r"
while 1 {
    expect {
        -re "state.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


spawn /bin/bash

set host_spawn_id $spawn_id
set timeout 5
expect -re $sh_prompt

incr case_num
set timeout 15
send "su\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re $sh_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $kermit_spawn_id
set timeout 5
expect -re $kernel_prompt


for {set count 1} {$count <= $Total_Count} {incr count} {
    if { $board_type == "BF609-EZKIT" } {
        pm_test_case1_reset
    } else {
        pm_test_case1_rtcwake
    }
    send_user "\nPM test case 1 round $count pass\n\n"
}

incr case_num
if { $wakeup_fail == 0 } {
    send_user "Wake up pass\n"
    case_pass $case_num
} else {
    send_user "Wake up fail $wakeup_fail times\n"
    case_fail $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
