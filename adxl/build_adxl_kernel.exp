#!/usr/bin/expect

source ../common/kernel_config.exp

set port_config "i2c"
if { $argc >= 2} {
    set port_config [lindex $argv 1]
}

log_file [log_file_name $argv0.$port_config ]

source ../common/board_info.exp
send_user "Starting $argv0\n"

if { $port_config == "i2c" || $port_config == "spi" } {
    send_log "\n#### Port config is $port_config.\n"
} else {
    send_log "\n#### This config $port_config is not supported. Sorry.\n"
    exit
}

cd $src_root/testsuites/common

step "Make config."

source make_default_config.exp

# Following make specific configuration for this case.
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        -re "I2C support.*I2C\[^_].*\\\[.*]" {
            if { $port_config == "i2c" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "I2C device interface.*I2C_CHARDEV.*\\\[.*]" {
            if { $port_config == "i2c" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            if { $port_config == "i2c" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin TWI I2C clock.*I2C_BLACKFIN_TWI_CLK_KHZ.*\\\[.*]" {
            if { $port_config == "i2c" } {
                 send "100\r"
            } else {
                 send "\r"
            }
        }

        -re "SPI support.*SPI.*\\\[\[^\r]*]" {
            if { $port_config == "spi" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }


        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        -re "Generic input layer.*needed for keyboard, mouse.*INPUT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Event interface.*INPUT_EVDEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Miscellaneous devices.*INPUT_MISC.*\\\[.*]" {
            send "Y\r"
        }

        -re "Analog Devices ADXL34x Three-Axis Digital Accelerometer.*INPUT_ADXL34X.*\\\[.*]" {
            send -s "Y\r"
        }

         -re "support I2C bus connection.*INPUT_ADXL34X_I2C.*\\\[.*]" {
            if { $port_config == "i2c" } {
                send -s "Y\r"
            } else {
                send -s "N\r"
            }
        }

         -re "support SPI bus connection.*INPUT_ADXL34X_SPI.*\\\[.*]" {
            if { $port_config == "spi" } {
                send -s "Y\r"
            } else {
                send -s "N\r"
            }
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $src_root
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
    expect {

        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "event test.*BR2_PACKAGE_EVENT_TEST.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy linux"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
