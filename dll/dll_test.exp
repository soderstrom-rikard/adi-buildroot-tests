#!/usr/bin/expect

source  ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../common/spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../common/reboot_kernel.exp
sleep 5
send "\r"
expect -re $kernel_prompt

set case_num 0
incr case_num

step "Clean src directory\n"
set timeout 30
spawn make clean -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "\nClean src\n"
            break
        }
        timeout {
            break
        }
    }
}

step "Build test program\n"
spawn make -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "\nBuild test program done\n"
            break
        }
        timeout {
            break
        }
    }
}


set spawn_id $kermit_spawn_id

send "ifconfig eth0 $targetip up\r"
set timeout 60
while 1 {
    expect {
        -re "$kernel_prompt" {
            send "\r"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5
send "ifconfig eth0\r"
set timeout 60
while 1 {
    expect {
        -re "$targetip.*$kernel_prompt" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set timeout 100
step "Copy testcase to target board\n"
spawn rcp src/libhelloworld.so root@$targetip:/lib/.
while 1 {
    expect {
        -re "connect|No route to host|No such file or directory" {
            case_fail $case_num
        }
        eof {
            send_user "\nCopy libhelloworld.so to target board done\n"
            break
        }
        timeout {
            break
        }
    }
}

spawn rcp src/test_dll root@$targetip:/.
while 1 {
    expect {
        -re "connect|No route to host" {
            case_fail $case_num
        }
        eof {
            send_user "\nCopy test_dll to target board done\n"
            break
        }
        timeout {
            break
        }
    }
}

step "Start testing"
set spawn_id $kermit_spawn_id
set timeout 5
set testres 0
send "./test_dll\r"
while 1 {
    expect {
        "hello" {
            send_user "\nTest get hello\n"
            incr testres
            if { $testres == 2 } {
                case_pass $case_num
                break
            }
        }
        "get 2" {
            send_user "\nTest get correct return value\n"
            incr testres
            if { $testres == 2 } {
                case_pass $case_num
                break
            }
        }

        -re "(Trace:.*\r\n\r\n)|(Kernel panic)" {
            expect -re $kernel_prompt
            send_user "\nKernel show dump info or panic\n"
            case_fail $case_num
        }

        timeout {
            send_user "\ntest timeout\n"
            break
        }
    }
}

if { $testres == 2 } {
    all_pass
} else {
    case_fail $case_num
}

send_user "Ending $argv0\n"

log_file
