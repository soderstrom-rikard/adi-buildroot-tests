#!/usr/bin/expect --
#
# Build Kernel for USB host test
#
# Usage:
#   ./build_usbhost_kernel.exp board_type usb_driver musb_mode
#
# Example:
#   ./build_usbhost_kernel.exp BF537-STAMP usbhost_isp1362
#   ./build_usbhost_kernel.exp BF609-EZKIT musb dma
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, usb_driver(usbhost_isp1362, usbhost_sl811, usbhost_isp1760 or musb)\n"
    puts "If musb is used, please also input: musb_mode(dma or pio)\n"
    exit
}
set usb_driver [lindex $argv 1]

if { $usb_driver == "musb" } {
    if { $argc > 2 } {
        set musb_mode [lindex $argv 2]
    } else {
        set musb_mode "dma"
    }
    set log_name build_usbhost_musb_${musb_mode}_kernel_log
} else {
    set log_name build_${usb_driver}_kernel_log
}


log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### Build kernel with $usb_driver. ####\n"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

cd $src_root/testsuites/common
step "Kernel config for specified usb host"
if [ info exists musb_mode ] {
    source_args config_usb.exp $usb_driver $musb_mode
} else {
    source_args config_usb.exp $usb_driver
}

cd $src_root/testsuites/common
step "Release memory from user space"
source config_cut_app.exp


step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

        -re "SCSI device support \\\(SCSI\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "SCSI disk support.*BLK_DEV_SD.*\\\[.*]" {
            send "Y\r"
        }

        -re "Probe all LUNs on each SCSI device.*SCSI_MULTI_LUN.*\\\[.*]" {
            send "Y\r"
        }

# USB support: musb config has most been done in config_usb.exp
        -re "USB Mass Storage support.*USB_STORAGE.*\\\[.*]" {
            send "Y\r"
        }

# File system config
        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT.*Windows-95.*fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[.*]" {
            send "437\r"
        }

        -re "Default iocharset for FAT \\\(FAT_DEFAULT_IOCHARSET\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

# Native language support
        -re "Default NLS Option \\\(NLS_DEFAULT\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "bonnie\\\+\\\+.*BR2_PACKAGE_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
