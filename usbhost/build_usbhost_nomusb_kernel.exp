#!/usr/bin/expect --
#
# Build Kernel for USB host test for isp1362 and sl811
#
# Usage:
#   ./build_usbhost_nonmusb_kernel.exp board_type usb_driver
#
# Example:
#   ./build_usbhost_nonmusb_kernel.exp BF537-STAMP usbhost_isp1362
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, usb_driver(usbhost_isp1362, usbhost_sl811 or usbhost_isp1760)"
    exit
}
set usb_driver [lindex $argv 1]
set log_name build_${usb_driver}_kernel_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### Build kernel with $usb_driver. ####\n"

set env(EXT2_BLOCKS) "10240"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {
#CONFIG_MTD_PHYSMAP claims the entire Async. Memory Space
#need to entirely disable it while using various U-Connector boards
            send "N\r"
        }

        -re "Bank 3.*BANK_3.*\\\[.*]" {
            if { $usb_driver == "usbhost_isp1362" || $usb_driver == "usbhost_sl811" } {
                send "0xAAC2\r"
            } elseif { $usb_driver == "usbhost_isp1760" } {
                send "0x66C4\r"
            } else {
                send "\r"
            }
        }

        -re "SCSI device support \\\(SCSI\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "SCSI disk support.*BLK_DEV_SD.*\\\[.*]" {
            send "Y\r"
        }

        -re "Probe all LUNs on each SCSI device.*SCSI_MULTI_LUN.*\\\[.*]" {
            send "Y\r"
        }

# USB support
        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "Y\r"
        }

        -re "ISP 1760 HCD support.*USB_ISP1760_HCD.*\\\[.*]" {
            if { $usb_driver == "usbhost_isp1362" } {
                send "N\r"
            } elseif { $usb_driver == "usbhost_sl811" } {
                send "N\r"
            } elseif { $usb_driver == "usbhost_isp1760" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "ISP1362 HCD support.*USB_ISP1362_HCD.*\\\[.*]" {
            if { $usb_driver == "usbhost_isp1362" } {
                send "Y\r"
            } elseif { $usb_driver == "usbhost_sl811" } {
                send "N\r"
            } elseif { $usb_driver == "usbhost_isp1760" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

        -re "SL811HS HCD support.*USB_SL811_HCD.*\\\[.*]" {
            if { $usb_driver == "usbhost_isp1362" } {
                send "N\r"
            } elseif { $usb_driver == "usbhost_sl811" } {
                send "Y\r"
            } elseif { $usb_driver == "usbhost_isp1760" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

        -re "Dummy Delay ASYNC Memory Bank.*(\[0-9]+). Bank0.*DUMMY_DELAY_BANK0.*\[cC]hoice\\\[.*]" {
            if { $usb_driver == "usbhost_isp1362" || $usb_driver == "usbhost_sl811" } {
                send "$expect_out(1,string)\r"
            } else {
                send "\r"
            }
        }

        -re "USB Mass Storage support.*USB_STORAGE.*\\\[.*]" {
            send "Y\r"
        }

# File system config
        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT.*Windows-95.*fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[.*]" {
            send "437\r"
        }

        -re "Default iocharset for FAT \\\(FAT_DEFAULT_IOCHARSET\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

# Native language support
        -re "Default NLS Option \\\(NLS_DEFAULT\\\).*\\\[.*]" {
            send "iso8859-1\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "bonnie\\\+\\\+.*BR2_PACKAGE_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
