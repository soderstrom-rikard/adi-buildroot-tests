#!/usr/bin/expect --
#
# Build Kernel for XIP test in userspace.
# Root file system is initramfs.
# Test application is run in additional ROM file systems.
#
# Usage:
#   ./build_xip_userspace_kernel.exp board_type binary_format
#
# Example:
#   ./build_xip_userspace_kernel.exp BF537-STAMP fdpic
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, binary_format(fdpic or shared-flat)"
    exit
}
set format [lindex $argv 1]
set log_name build_xip_userspace_${format}_kernel_log

log_file $log_name
send_user "Starting $argv0\n"
send_log "\n#### Build kernel with binary_format $format. ####\n"


# Command source_args can pass arguments while running source.
# Send bfin binary formats as argument for make_bfin-format.exp,
# and change to the specified bfin binary formats.
# It won't change formats for arm.
# make clean and source make_default_config.exp are already included.
cd $src_root/testsuites/common
step "Make config for specified bfin format"
source_args make_bfin-format.exp $format

step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Initial RAM filesystem and RAM disk.*BLK_DEV_INITRD.*\\\[.*]" {
            send "Y\r"
        }

        -re "Detect flash chips by Common Flash Interface.*MTD_CFI.*\\\[.*]" {
            send "N\r"
        }

        -re "Support for AMD.*flash chips.*MTD_CFI_AMDSTD.*\\\[.*]" {
            send "N\r"
        }

        -re "Support for ROM chips in bus mapping.*MTD_ROM.*\\\[.*]" {
            send "Y\r"
        }

        -re "Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {
            send "Y\r"
        }

        -re "Miscellaneous filesystems \\\(MISC_FILESYSTEMS.*\\\[.*]" {
            send "Y\r"
        }

        -re "ROM file system support.*ROMFS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "RomFS backing stores.* (\[0-9]+). MTD-backed ROM file system support.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Enable shared FLAT support \\\(BINFMT_SHARED_FLAT\\\).*\\\[././.]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "xip test.*XIP_TEST.*\\\[.*]" {
            send "Y\r"
        }

        -re "Target Binary Format.*ELF.*FDPIC.*FLAT.*\r\nchoice\\\[.*]" {
            if { $format == "fdpic" } {
                send "2\r"
            } elseif { $format == "shared-flat" } {
                send "3\r"
            } else {
                send "\r"
            }
        }

        -re "FLAT Binary type.*One binary.*BR2_BINFMT_FLAT_ONE.*Shared binary.*BR2_BINFMT_FLAT_SHARED.*\r\nchoice\\\[.*]" {
            if { $format == "shared-flat" } {
                send "3\r"
            } else {
                send "\r"
            }
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
