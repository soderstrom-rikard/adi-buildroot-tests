#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp
sleep 5
send "\r"
expect -re $kernel_prompt

set case_num 0
set timeout 10

spawn telnet $targetip
expect {
        "login:" { }
        timeout { send_user "Failed first return\n"
                }
}
send -s "root\r"
expect {
        ">" {  }
        timeout { send_user "Failed inital telnet\n"
                exit }
}

set spawn_telnet $spawn_id
send "\r"
expect -re $kernel_prompt

incr case_num
send "while \[ 1 \]; do amixer cset name='DAC1 Playback Volume' 655; amixer cset name='DAC1 Playback Volume' 1002; done\r"
while 1 {
    expect {
        -re "655.*1002.*655.*1002" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "run mixer timeout\n"
            case_fail $case_num
        }
    }
}

set spawn_id $kermit_spawn_id
sleep 3
send "\r"
expect -re $kernel_prompt

set mmc_dev mmcblk0
set mmc_dev1 mmcblk0p1
set mmc_dev2 mmcblk0p2

set timeout 10
send "fdisk /dev/$mmc_dev\r"
expect -re "Command.*:"
send "p\r"
set timeout 10
while 1 {
    expect {
        -re "/dev/$mmc_dev1" {
            send "d\r"
            expect -re "Partition number.*"
            send "1\r"
            expect -re "Command.*"
            break
        }
        eof {
            break
        }
        timeout {
            break
        }
    }
}

sleep 2
send "p\r"
while 1 {
    expect {
        -re "/dev/$mmc_dev2" {
            send "d\r"
            expect -re "Partition number.*"
            send "2\r"
            expect -re "Command.*"
            send "w\r"
            expect -re $kernel_prompt
            break
        }
        eof {
            send "w\r"
            expect -re $kernel_prompt
            break
        }
        timeout {
            send "w\r"
            expect -re $kernel_prompt
            break
        }
    }
}


set timeout 10
send "fdisk /dev/$mmc_dev\r"
expect -re "Command.*:"
send "n\r"
expect -re "primary partition.*"
send "p\r"
expect -re "Partition number.*"
send "1\r"
expect -re "First cylinder.*"
send "\r"
expect -re "Last cylinder.*"
send "\r"
expect -re "Command.*"
send "w\r"
expect -re $kernel_prompt

send_user "Whole card is created as ext2 partition\n"

incr case_num
set timeout 5
send "ls /dev/$mmc_dev*\r"
while 1 {
    expect {
        -re "$mmc_dev.*$mmc_dev1.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 90
send "mke2fs /dev/$mmc_dev1\r"
while 1 {
    expect {
        -re "Filesystem label.*$kernel_prompt" {
            send_user "mke2fs done, test pass\n"
            case_pass $case_num
            break
        }
        -re "\[Ee]rror|failed.*$kernel_prompt" {
            send_user "mke2fs fail, test fail\n"
            case_fail $case_num
        }

        timeout {
            send_user "mke2fs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t ext2 /dev/$mmc_dev1 /mnt\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            send_user "mount EXT2 FS fail, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "mount EXT2 FS done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount EXT2 FS timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
send "echo 0 > /proc/sys/kernel/hung_task_timeout_secs\r"
expect -re $kernel_prompt

set timeout 3600
incr case_num
send "time bonnie++ -u root -d /mnt -s 50M\r"
while 1 {
    expect {
        -re "Hardware Trace" {
            set timeout 60
            expect -re $kernel_prompt
            send_user "bonnie++ failed\n"
            case_fail $case_num
        }
        -re "Latency.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "bonnie++ timeout\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
