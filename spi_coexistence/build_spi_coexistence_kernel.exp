#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

if { $board_type == "BF537-STAMP" } {
    set board_file $src_root/linux/linux-kernel/arch/blackfin/mach-bf537/boards/stamp.c
}

if [ catch {exec sed -i "/modalias.*mmc_spi/,/chip_select/ s/4/1/" $board_file} ] {
    send_user "\nfail to modify board file\n"
    send_user "$errorInfo\n"
    exit
}

set env(EXT2_BLOCKS) "10240"

cd $src_root/testsuites/common
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $src_root/testsuites/common
step "Make config."
source make_default_config.exp

# Following make specific configuration for this case.
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        -re "SPI bus lock.*SPI_BFIN_LOCK.*\\\[.*]" {
            send "Y\r"
        }

#spi mmc
        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT \\\(Windows-95\\\) fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[.*]" {
            send "850\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "Codepage 850.*Europe.*NLS_CODEPAGE_850.*\\\[.*]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO card support \\\(MMC\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO over SPI.*MMC_SPI.*\\\[.*]" {
            send "Y\r"
        }

#sound card
        -re "I2C support \\\(I2C\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "Y\r"
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS PCM.*digital audio.*API.*SND_PCM_OSS\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Cascaded AD73322 Audio support for BF53x.*SND_BFIN_AD73322.*\\\[.*]" {
            send "N\r"
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "Y\r"
        }

        -re "SoC I2S Audio for the ADI Blackfin chip.*SND_BF5XX_I2S.*\\\[.*]" {
            send "N\r"
        }

        -re "SoC I2S\\\(TDM mode\\\) Audio for the ADI BF5xx chip.*SND_BF5XX_TDM.*\\\[.*]" {
            send "Y\r"
        }

        -re "AD1836 Audio support for BF5xx.*SND_BF5XX_SOC_AD1836.*\\\[.*]" {
            send "Y\r"
        }

        -re "Set a SPORT for Sound chip.*SND_BF5XX_SPORT_NUM.*\\\[.*]" {
            send "1\r"
        }

        -re "SoC AC97 Audio for the ADI BF5xx chip.*SND_BF5XX_AC97.*\\\[.*]" {
            send "N\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $src_root
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
    expect {

        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "e2fsprogs.*BR2_PACKAGE_E2FSPROGS.*\\\[.*]" {
            send "Y\r"
        }

        -re "e2fsck.*BR2_PACKAGE_E2FSPROGS_E2FSCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "mke2fs.*BR2_PACKAGE_E2FSPROGS_MKE2FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "badblocks.*BR2_PACKAGE_E2FSPROGS_BADBLOCKS.*\\\[.*]" {
            send "Y\r"
        }

        -re "dosfstools.*BR2_PACKAGE_DOSFSTOOLS.*\\\[.*]" {
            send "Y\r"
        }

        -re "mkdosfs.*BR2_PACKAGE_DOSFSTOOLS_MKDOSFS.*\\\[.*]" {
            send "Y\r"
        }

#########

        -re "alsa-utils \\\(BR2_PACKAGE_ALSA_UTILS\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "amixer \\\(BR2_PACKAGE_ALSA_UTILS_AMIXER\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "aplay/arecord \\\(BR2_PACKAGE_ALSA_UTILS_APLAY\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "speaker-test \\\(BR2_PACKAGE_ALSA_UTILS_SPEAKER_TEST\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "play \\\(BR2_PACKAGE_PLAY\\\) \\\[.*]" {
            send "Y\r"
        }


#        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
#            send "Y\r"
#        }
#
#        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
#            send "Y\r"
#        }
#
#        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
#            send "Y\r"
#        }
#
#        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
#            send "Y\r"
#        }
#
        -re "bonnie\\\+\\\+.*BR2_PACKAGE_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
        }
    }
}

step "Make busybox config"
cd $src_root
set timeout 300
spawn make busybox-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "fdisk \\\(FDISK\\\) \\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source  make_kernel.exp

cd $src_root/testsuites/common
step "Copy linux"
source   copy_image.exp

send_user "Ending $argv0\n"
log_file
