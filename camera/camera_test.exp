#!/usr/bin/expect
#
# Test camera VS6624 on target board
#
# Usage:
#   ./usb_camera_test.exp board_type
#
# Example:
#   ./usb_camera_test.exp BF609-EZKIT
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp

set timeout 10
expect -re $kernel_prompt
send "\r"
expect -re $kernel_prompt

step "Start testing"
set case_num 0

incr case_num
set timeout 5
send "modprobe vs6624\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Linux video capture interface.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "modprobe bfin_video_capture\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "v4l2 sub device registered.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5

incr case_num
set timeout 20
send "ffmpeg -f video4linux2 -s 320x240 -pix_fmt uyvy422 -r 25 -i /dev/video0 -qscale 6 -vcodec mpeg2video -f mpeg2video udp://$serverip:1234\r"
while 1 {
    expect {
        -re "bfin_capture.*dma_alloc_coherent of size.*fail" {
            continue
        }
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Stream mapping.*kbits/s" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 15

incr case_num
set timeout 10
send "q"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "video.*audio.*global headers.*muxing overhead.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Save captured image to host PC via rcp"

incr case_num
set timeout 20
send "ffmpeg -f video4linux2 -s 320x240 -pix_fmt uyvy422 -r 25 -i /dev/video0 -qscale 6 -vcodec mpeg2video -f avi /var/camera.avi\r"
while 1 {
    expect {
        -re "bfin_capture.*dma_alloc_coherent of size.*fail" {
            continue
        }
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Overwrite.*\\\[.*]" {
            send "y\r"
            continue
        }
        -re "Stream mapping.*kbits/s" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 10

incr case_num
set timeout 10
send "q"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "video.*audio.*global headers.*muxing overhead.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if [ catch {exec rcp root@$targetip:/var/camera.avi ./} ] {
    send_user "FAIL: rcp camera.avi host PC\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: rcp camera.avi host PC\n"
}

incr case_num
set timeout 5
send "modprobe -r bfin_video_capture\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "bfin_video_capture" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
