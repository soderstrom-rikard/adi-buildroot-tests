#!/usr/bin/expect
#
# Test camera VS6624 on target board
#
# Usage:
#   ./camera_test.exp board_type camera_dev
#
# Example:
#   ./camera_test.exp BF609-EZKIT camera_vs6624
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, camera_dev(camera_vs6624 or camera_mt9m114)"
    exit
}

set camera_dev [lindex $argv 1]
set camera_module [string trimleft [string trimleft $camera_dev camera] _]
set TITLE [title "$argv0"]
append TITLE " ($camera_module)"
set log_name ${camera_dev}_test_log

log_file $log_name
send_user "Starting $argv0\n"

step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp

set timeout 10
expect -re $kernel_prompt
send "\r"
expect -re $kernel_prompt

step "Start testing"
set case_num 0

incr case_num
set timeout 5
send "dmesg | grep capture\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Linux video capture interface.*v4l2 sub device registered.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5

incr case_num
set timeout 20
send "ffmpeg -f video4linux2 -s 320x240 -pix_fmt uyvy422 -r 25 -i /dev/video0 -qscale 6 -vcodec mpeg2video -f mpeg2video udp://$serverip:1234\r"
while 1 {
    expect {
        -re "bfin_capture.*dma_alloc_coherent of size.*fail" {
            continue
        }
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Stream mapping.*kbits/s" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 15

incr case_num
set timeout 10
send "q"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "video.*audio.*global headers.*muxing overhead.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Save captured image to host PC via rcp"

incr case_num
set timeout 20
send "ffmpeg -f video4linux2 -s 320x240 -pix_fmt uyvy422 -r 25 -i /dev/video0 -qscale 6 -vcodec mpeg2video -f avi /var/$camera_dev.avi\r"
while 1 {
    expect {
        -re "bfin_capture.*dma_alloc_coherent of size.*fail" {
            continue
        }
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Overwrite.*\\\[.*]" {
            send "y\r"
            continue
        }
        -re "Stream mapping.*kbits/s" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 10

incr case_num
set timeout 10
send "q"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "video.*audio.*global headers.*muxing overhead.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if [ catch {exec rcp root@$targetip:/var/$camera_dev.avi ./} ] {
    send_user "FAIL: rcp $camera_dev.avi host PC\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: rcp $camera_dev.avi host PC\n"
}

incr case_num
set timeout 10
send "v4l2_video_capture -w 320 -h 240 -N 5 -F /var/$camera_dev.yuv\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "frames captured.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if [ catch {exec rcp root@$targetip:/var/$camera_dev.yuv ./} ] {
    send_user "FAIL: rcp $camera_dev.yuv to host PC\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: rcp $camera_dev.yuv to host PC\n"
}

all_pass
send_user "Ending $argv0\n"
log_file
