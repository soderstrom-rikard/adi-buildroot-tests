#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

step "Start tetsting."
sleep 10
set case_num 0
set timeout 8

send "ifconfig eth0 $targetip\r"
expect -re $kernel_prompt

sleep 3
send "ifconfig\r"
while 1 {
    expect {
        -re "$targetip.*$kernel_prompt" {
            break
        }
        timeout {
            send_user "Fail ifconfig."
            case_fail $case_num
        }
    }
}

sleep 2
incr case_num
send "portmap -f &\r"
while 1 {
    expect {
        -re "\[0-9]+.*$kernel_prompt" {
            send_user "\nportmap run success.\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 8
incr case_num
set timeout 30
send -s "mount -o nolock,rsize=1024,wsize=1024,tcp -t nfs $serverip:/tftpboot /mnt\r"
while 1 {
    expect {
        -re "(\[fF]ail|mount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send -s "mount\r"
while 1 {
    expect {
        -re "(\[fF]ail|mount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send -s "ls /mnt\r"
while 1 {
    expect {
        -re "uImage.*$kernel_prompt" {
            send_user "******* nfs mount  success.\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send -s "umount /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            send_user "nfs umount.\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 3
send -s "ls /mnt\r"
while 1 {
    expect {
        "home" {
            case_fail $case_num
        }
        timeout {
            case_pass $case_num
            break
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
