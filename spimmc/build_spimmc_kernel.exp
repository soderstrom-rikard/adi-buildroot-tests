#!/usr/bin/expect --
#
# Build Kernel for spi MMC/SD test
#
# Usage:
#   ./build_spimmc_kernel.exp board_type
#
# Example:
#   ./build_spimmc_kernel.exp BF537-STAMP
#

source ../common/kernel_config.exp

set spi_mode "poll"
if { $argc >= 2} {
    set spi_mode [lindex $argv 1]
}

log_file [log_file_name $argv0.$spi_mode ]
send_user "Starting $argv0\n"

if { $board_type == "BF537-STAMP" } {
    set board_file $src_root/linux/linux-kernel/arch/blackfin/mach-bf537/boards/stamp.c
    if [ catch {exec sed -i "/modalias.*mmc_spi/,/chip_select/ s/4/1/" $board_file} ] {
        send_user "\nfail to modify board file\n"
        send_user "$errorInfo\n"
        exit
    }
}

if { $board_type == "BF533-STAMP" } {
    set board_file $src_root/linux/linux-kernel/arch/blackfin/mach-bf533/boards/stamp.c
}

if { $spi_mode == "interrupt" } {
    if [ catch {exec sed -i "/pio_interrupt/ s/0/1/" $board_file} ] {
        send_user "\nfail to modify board file\n"
        send_user "$errorInfo\n"
        exit
    }
}

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

cd $src_root/testsuites/common
step "Release memory from user space"
source config_cut_app.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "SPI bus lock.*SPI_BFIN_LOCK.*\\\[.*]" {
            send "Y\r"
        }

#spi mmc
        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT \\\(Windows-95\\\) fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[.*]" {
            send "850\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "Codepage 850.*Europe.*NLS_CODEPAGE_850.*\\\[.*]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO card support \\\(MMC\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO over SPI.*MMC_SPI.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

step "Make busybox config"
cd $src_root
set timeout 300
spawn make busybox-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "fdisk \\\(FDISK\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "mkfs_ext2 \\\(MKFS_EXT2\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "mkfs_vfat \\\(MKFS_VFAT\\\) \\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "bonnie\\\+\\\+.*BR2_PACKAGE_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

#######################################################################
## Build the sdiommc again for vmImage that doesn't include init ramfs.

cd $src_root/testsuites/common
step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Initial RAM filesystem and RAM disk.*initramfs/initrd.*support.*BLK_DEV_INITRD.*\\\[.*]" {
            send "N\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            break
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
if [ catch {exec cp $src_root/output/images/$compressed_kernel_only_image /tftpboot} ] {
    send_user "$errorInfo\n"
    exit
}
if [ catch {exec cp /tftpboot/$boot_image $src_root/output/images} ] {
    send_user "$errorInfo\n"
    exit
}

send_user "Ending $argv0\n"
log_file
