#!/usr/bin/expect

source ../common/kernel_config.exp
source ../common/board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
set kermit_ttydev $ttyUSBdev
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

set case_num 0
set ptp_board_targetip 10.100.4.51

set first_target_id $spawn_id

incr case_num
send -s "ifconfig eth0 $ptp_board_targetip \r" 
while 1 {
   expect {
     -re "$kernel_prompt" {
	 puts "ifconfig success.\n"
         case_pass $case_num
         break
      }

      timeout { 
         break
         }
     }
}

send_user "Start another machine to test canbus."

step "Start kermit."
set kermit_ttydev $ttydev
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

for {set i 0} {$i < 2 } {incr i} {

if { $i == 0 } {
set ptp_cmd "ptpd -z linux_hw"
} elseif { $i == 1 } {
set ptp_cmd "ptpd2 -d"
}

set second_target_id $kermit_spawn_id

incr case_num
send_user "\nOn the master machine setting time .\n"
send -s "\r"
expect  -re $kernel_prompt

set timeout 8

incr case_num
send -s "ifconfig eth0 $targetip \r" 
while 1 {
   expect {
     -re "$kernel_prompt" {
	 puts "ifconfig success.\n"
         case_pass $case_num
         break
      }

      timeout { 
         break
         }
     }
}
incr case_num

send -s "version \r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
incr case_num

send -s "date -s 2011.11.14-17:15:10\r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}

send -s "date \r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}

send -s "$ptp_cmd -f log.master\r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}

incr case_num

send -s "ps auxf\r" 
while 1 {
   expect {
      -re "ptpd.*linux_hw.*$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
incr case_num

send_user "\nSleep to wait for sync... .\n"
sleep 20

send_user "\nOn the slave machine sync time .\n"
set spawn_id $first_target_id

send -s "ifconfig eth0 \r" 
while 1 {
   expect {
     -re "$kernel_prompt" {
	 puts "ifconfig success.\n"
         case_pass $case_num
         break
      }

      timeout { 
         break
         }
     }
}

send -s "version \r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
send -s "date \r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
incr case_num

send -s "$ptp_cmd -g -f log.slave\r" 
while 1 {
   expect {
      -re "$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}

sleep 20
incr case_num

send -s "ps auxf\r" 
while 1 {
   expect {
      -re "ptpd.*linux_hw.*$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
incr case_num

send -s "date \r" 
while 1 {
   expect {
      -re "2011.*$kernel_prompt" { 
                case_pass $case_num
         break
      }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}

send -s "cat log.slave \r" 
while 1 {
   expect {
      -re "offset from master.*$kernel_prompt" { 
                case_pass $case_num
         break
      }

      -re "\[Ee]rror" {                           
                case_fail $case_num
      exit
         }

      timeout {                           
                case_fail $case_num
      exit
         }
     }
}
}
send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file
 

