#!/usr/bin/expect
#
#To use dataflash(df), remember to pass in "df"  as the second parameter like: ./spi_flash.exp BF537-STAMP df
#
# Add-on board jumper is IC3.

source ../common/kernel_config.exp
source ../common/board_info.exp

set mode pio
set spi_board_type normal

if { $argc >= 2} {
set mode [lindex $argv 1]
}

if { $argc >= 3} {
set spi_board_type [lindex $argv 2]
  if { $spi_board_type == "df" } {
      set spi_rootfs_num 2
      set page_size  512
      set erase_size 8192
}
}
log_file [log_file_name "$argv0.$mode.$spi_board_type"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]
append TITLE " ($mode $spi_board_type)"
set page_size  4096
set erase_size 65536


step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

set TEST_PASS               "pass"
set TEST_FAIL               "fail"

step "MTD test"

set case_num 0

incr case_num

set timeout 5
set mtd_temp_result $TEST_FAIL
set mtd_result $TEST_FAIL
send -s "cat /proc/mtd \r"
while 1 {
    expect {

       -re  "mtd(\[0-9]):\[^\r]*spi" {
                set spi_rootfs_num $expect_out(1,string)
                set mtd_temp_result $TEST_PASS
                send_user "\nspi_rootfs_num $spi_rootfs_num \n"
        }

        timeout {
                break
        }
    }
}

expect  -re $kernel_prompt

incr case_num

step "Erase MTD "
set timeout 500
send -s "flash_erase /dev/mtd$spi_rootfs_num 0 0\r"
while 1 {
    expect {
	
	 -re $kernel_prompt {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

incr case_num

step "Mount MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "mount -t jffs2 /dev/mtdblock$spi_rootfs_num /mnt\n"
while 1 {
    expect {    
         -re $kernel_prompt {
                case_pass $case_num
		break
        }

        "failed" {
                case_fail $case_num
                exit
        }
                                                                                                                                                             
        timeout {
                case_fail $case_num
		exit
        }
    }
}

step "Reading MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "ls /mnt\n"
while 1 {
    expect {    
        "home" {
		break
        }
         
        "test" {
                break
        }
                                                                                                                                                    
        timeout {
		break
        }
    }
}

expect ">"
     
incr case_num

step "Reading MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "umount /mnt\n"
while 1 {
    expect {    
        ">" {
                case_pass $case_num
		break
        }
                                                                                                                                                             
        timeout {
                case_fail $case_num
		exit
        }
    }
} 
                                                                                                                                                      
sleep 1

incr case_num

step "Test with mtd_debug "
incr case_num
send -s  "ls -l /etc/inittab \r"
while 1 {
   expect {
     -re "root +(\[0-9]+) " {
         set size $expect_out(1,string)
         case_pass $case_num
         break
        }

      timeout {
                case_fail $case_num
      exit
      }
      }
}
	
set timeout 60
send -s "mtd_debug erase /dev/mtd$spi_rootfs_num 0 $erase_size\n"
while 1 {
    expect {    
        -re "Erased.*>" {
                case_pass $case_num
		break
        }
                                                                                                                                                             
        timeout {
                case_fail $case_num
		exit
        }
    }
} 
                                                                                                                                                      
set timeout 60
send -s "mtd_debug write /dev/mtdblock$spi_rootfs_num  0 $size /etc/inittab\n"
while 1 {
    expect {    
        -re "Copied.*>" {
                case_pass $case_num
		break
        }
                                                                                                                                                             
        timeout {
                case_fail $case_num
		exit
        }
    }
} 
                                                                                                                                                      
set timeout 60
send -s "mtd_debug read /dev/mtdblock$spi_rootfs_num  0 $size inittab_copy\n"
while 1 {
    expect {    
        -re "Copied.*>" {
                case_pass $case_num
		break
        }
                                                                                                                                                             
        timeout {
                case_fail $case_num
		exit
        }
    }
} 
                                                                                                                                                      
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "diff -u /etc/inittab inittab_copy \n"
while 1 {
    expect {   
        -re "\\\+\\\+\\\+.*$kernel_prompt" {
            case_fail $case_num
        }
        -re "differ.*$kernel_prompt" {
            case_fail $case_num
        }
        ">" {
                case_pass $case_num
		break
        }
        timeout {
                case_fail $case_num
		exit
        }
    }
} 
                                                                                                                                                      
sleep 1
incr case_num

step "Erase MTD "
set timeout 500
send -s "flash_erase -j /dev/mtd$spi_rootfs_num 0 0\r"
while 1 {
    expect {
	
	 -re $kernel_prompt {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

step "Make jffs2 image"

send_log " \n1)create file system directory\n"
send -s "mkdir -p rootfs\r"
expect ">"
send_log " \n2)create test file\n"
send -s "echo This is test for mtd driver > rootfs/test\r"
expect  -re $kernel_prompt
send_log " \n3)create JFFS2 image\n"
send -s "mkfs.jffs2 -n -r rootfs -s $page_size -e $erase_size -o mtd.img\r"
expect ">"

incr case_num

step "Writing MTD"
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "flashcp mtd.img /dev/mtd$spi_rootfs_num\r"
while 1 {
    expect {
	
	 -re $kernel_prompt {
		set mtd_temp_result $TEST_PASS
                case_pass $case_num
		break
	}

       "error" {
                case_fail $case_num
                exit
        }
	
	timeout {
                case_fail $case_num
		exit
	}
    }
}

if  { $mtd_temp_result!=$TEST_PASS } {
        exit
}

incr case_num

step "Reading MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 60
send -s "mount -t jffs2 /dev/mtdblock$spi_rootfs_num /mnt\n"
while 1 {
    expect {    
         -re $kernel_prompt {
                set mtd_temp_result $TEST_PASS
                case_pass $case_num
		break
        }

       "failed" {
                case_fail $case_num
                exit
        }

        timeout {
                case_fail $case_num
		exit
        }
    }
}
                                                                                                                                                             
if  { $mtd_temp_result!=$TEST_PASS } {
        exit
}

incr case_num
step "cp busybox to JFFS."
set jffs_temp_result $TEST_FAIL

set timeout 200
send -s "cp /bin/busybox /mnt\r"
while 1 {
    expect {
         -re $kernel_prompt {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}

sleep 1

step "JFFS Validating data integrity"
set jffs_temp_result $TEST_FAIL
incr case_num

set timeout 60
send "while \[ 1 \]; do md5sum /mnt/busybox ; done\r"
while 1 {
   expect {
      -re "\[0-9a-z]+  /mnt/busybox" {
                sleep 3
                send "\3"
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
                exit
         }
     }
}

expect ">"

incr case_num

step "Verify "
set timeout 2
send -s "cmp /rootfs/test /mnt/test\r"
while 1 {
    expect {
	"differ" {
                case_fail $case_num
		exit
	}

        "No such file or directory" {
                case_fail $case_num
                exit
        }

	timeout {
		set mtd_results $TEST_PASS
                case_pass $case_num
		break
	}
    }
}

incr case_num
set timeout 30
expect  -re $kernel_prompt
send -s "umount /mnt\r"
while 1 {
    expect {

       -re $kernel_prompt {
                break
        }

       "failed" {
                case_fail $case_num
                exit
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}
send -s "ls /mnt\r"
while 1 {
    expect {

        "test" {
                case_fail $case_num
                exit
        }

        timeout {
                case_pass $case_num
                break
        }
    }
}

if { $board_type != "BF526-EZBRD" } {

#Copy a rootfs into flash partition.
incr case_num
set timeout 5
send "mkdir /mnt/rootfs\r"
expect -re $kernel_prompt
send "mount -t jffs2 /dev/mtdblock$spi_rootfs_num /mnt/rootfs\r"
expect -re $kernel_prompt
send "ifconfig eth0 $targetip up\r"
expect -re $kernel_prompt
sleep 5
exec rcp ../common/runcp.sh root@$targetip:/.
sleep 1
set timeout 900
send "./runcp.sh\r"
while 1 {
    expect {
        -re "copy rootfs done.*$kernel_prompt" {
            send_user "finish to copy rootfs to mmc card\n"
            case_pass $case_num
            break
        }
        eof {
            break
        }
        timeout {
            send_user "copy rootfs to mmc card timeout\n"
            case_fail $case_num
        }
    }

}
}

incr case_num
set timeout 600
send "umount /mnt/rootfs\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            send_user "umount /mnt/rootfs fail, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount /mnt/rootfs done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount /mnt/rootfs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
