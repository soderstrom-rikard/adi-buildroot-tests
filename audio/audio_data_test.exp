#!/usr/bin/expect
#
# Record audio from PC and from board
#
# Usage:
#   ./audio_data_test.exp board_type audio_dev
#
# Example:
#   ./audio_data_test.exp BF609-EZKIT audio_adau1761
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, audio_dev"
    puts "Refer to build_audio_kernel.exp for audio_dev."
    exit
}
set audio_dev [lindex $argv 1]
set log_name ${audio_dev}_data_test_log
log_file $log_name
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]
append TITLE " ($audio_dev)"


step "Start kermit."
source ../common/spawn_kermit.exp

step "Boot kernel"
source ../common/kernel_boot.exp

step "Start testing."

set output_file_type "wav"
if { $audio_dev == "audio_ad1938" || $audio_dev == "audio_ad1836" || $audio_dev == "audio_ssm2603" || $audio_dev == "audio_adau1761" } {
    set channel "Stereo"
    set channel_num "2"
    set sample_rate "48000"
    set alsa_format "S32_LE"
} elseif { $audio_dev == "audio_ad73311" } {
    set channel "Mono"
    set channel_num "1"
    set sample_rate "8000"
    set alsa_format "S16_LE"
} else {
    send_user "Can not recognize audio device, exit"
    exit
}


proc rec_at_pc { freq } {
    global case_num
    global kermit_spawn_id
    global host_spawn_id
    global kernel_prompt
    global sh_prompt
    global output_dir
    global output_file_type
    global channel
    global channel_num
    global sample_rate
    global alsa_format

#Generate sine wave at $freq on target board.
    set spawn_id $kermit_spawn_id

    incr case_num
    set timeout 10
    send "tone -s -m 255 $freq\n"
    while 1 {
        expect {
            -re "TONE: generating sine wave at (\[0-9])+ Hz" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect -re $kernel_prompt
                case_fail $case_num
            }
        }
    }


#In PC, record output sound from target board
    set spawn_id $host_spawn_id

    incr case_num
    set timeout 10
    send "arecord -t $output_file_type -c $channel_num -f $alsa_format -r $sample_rate -d 5 $output_dir/${freq}Hz_BFIN2PC.wav\n"
    while 1 {
        expect {
            -re "$channel.*$sh_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect -re $sh_prompt
                case_fail $case_num
            }
        }
    }


#Stop playing sound on target board.
    set spawn_id $kermit_spawn_id

    incr case_num
    set timeout 5
    send "\3"
    while 1 {
        expect {
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

proc rec_from_pc { freq } {
    global case_num
    global kermit_spawn_id
    global host_spawn_id
    global kernel_prompt
    global sh_prompt
    global targetip
    global output_dir
    global output_file_type
    global channel
    global channel_num
    global sample_rate
    global alsa_format

#Generate sine wave at $freq on PC.
    set spawn_id $host_spawn_id

    incr case_num
    set timeout 10
    send "lsb_release -i\n"
    while 1 {
        expect {
            -re "lsb_release:.*not found.*$sh_prompt" {
                set linux_distribution suse
                case_pass $case_num
                break
            }
            -nocase -re "suse.*$sh_prompt" {
                set linux_distribution suse
                case_pass $case_num
                break
            }
            -nocase -re "ubuntu.*$sh_prompt" {
                set linux_distribution ubuntu
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect -re $sh_prompt
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    if { $linux_distribution == "ubuntu" } {
        send "speaker-test -t sine -b 1000000 -f $freq\n"
    } else {
        send "tone -s -m 255 $freq\n"
    }
    while 1 {
        expect {
            -re "TONE: generating sine wave at (\[0-9])+ Hz" {
                case_pass $case_num
                break
            }
            -re "Sine wave rate is (\[0-9])+\.0000Hz.*Front Left" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect -re $sh_prompt
                case_fail $case_num
            }
        }
    }

#In target board, record sample sound from PC with signed 16 bit little endian format, 44100 sample rate and mono.
    set spawn_id $kermit_spawn_id

    incr case_num
    set timeout 10
    send "arecord -t $output_file_type -c $channel_num -f $alsa_format -r $sample_rate -d 5 ${freq}Hz_PC2BFIN.wav\n"
    while 1 {
        expect {
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect -re $kernel_prompt
                case_fail $case_num
            }
        }
    }

#Stop playing sound on PC.
    set spawn_id $host_spawn_id

    incr case_num
    set timeout 5
    send "\3"
    while 1 {
        expect {
            -re $sh_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    if [ catch {exec rcp root@$targetip:/${freq}Hz_PC2BFIN.wav $output_dir} ] {
        send_user "FAIL: copy recorded file to PC\n"
        case_fail $case_num
    } else {
        send_user "PASS: copy recorded file to PC\n"
        case_pass $case_num
    }
}


step "Start test"
set case_num 0
set timeout 5
set output_dir audio_data

expect -re $kernel_prompt

incr case_num
set timeout 5
send "amixer cget name='Capture Switch'\r"
while 1 {
    expect {
        -re "amixer: Cannot find the given element.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        -re "values=off.*$kernel_prompt" {
            send "amixer cset name='Capture Switch' on\r"
            continue
        }
        -re "values=on.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if { $audio_dev == "audio_adau1361" } {
    incr case_num
    set timeout 15
    send "amixer cset name='Headphone Playback Switch' on; amixer cset name='Headphone Playback Volume' 40; amixer cset name='Left Playback Mixer Left DAC Switch' on; amixer cset name='Right Playback Mixer Left DAC Switch' on; amixer cset name='Lineout Playback Switch' on; amixer cset name='Lineout Playback Volume' 40; amixer cset name='Left LR Playback Mixer Left Volume' 2; amixer cset name='Right LR Playback Mixer Right Volume' 2; amixer cset name='Aux Capture Volume' 7; amixer cset name='Digital Capture Volume' 255; amixer cset name='Input 1 Capture Volume' 7; amixer cset name='Input 2 Capture Volume' 7; amixer cset name='Input 3 Capture Volume' 7; amixer cset name='Input 4 Capture Volume' 7\r"
    while 1 {
        expect {
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

if { $audio_dev == "audio_adau1761" } {
    incr case_num
    set timeout 15
    send "amixer cset name='Headphone Playback Switch' on; amixer cset name='Headphone Playback Volume' 40; amixer cset name='Right Playback Mixer Right DAC Switch' on; amixer cset name='Left Playback Mixer Left DAC Switch' on; amixer cset name='DSP Bypass Playback Switch' on; amixer cset name='DSP Bypass Capture Switch' on; amixer cset name='Digital Capture Volume' 255; amixer cset name='Input 2 Capture Volume' 7; amixer cset name='Input 4 Capture Volume' 7;\r"
    while 1 {
        expect {
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}


spawn /bin/bash
set host_spawn_id $spawn_id
expect -re $sh_prompt

if [ catch {exec rm -fr $output_dir} ] {
    send_user "FAIL: Remove the old DIRECTORY\n"
    send_user "$errorInfo\n"
} else {
    send_user "PASS: Remove the old DIRECTORY\n"
}

incr case_num
if [ catch {exec mkdir -p $output_dir} ] {
    send_user "FAIL: Create the DIRECTORY\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: Create the DIRECTORY\n"
    case_pass $case_num
}

rec_at_pc 100
rec_at_pc 250
rec_at_pc 440
rec_at_pc 1000
rec_at_pc 2000
rec_at_pc 3000

sleep 5

rec_from_pc 100
rec_from_pc 250
rec_from_pc 440
rec_from_pc 1000
rec_from_pc 2000
rec_from_pc 3000

all_pass
send_user "Ending $argv0\n"
log_file
