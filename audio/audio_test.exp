#!/usr/bin/expect
#
#Test audio driver on target board;
#
# Usage:
#   ./audio_test.exp board_type audio_dev
#
# Example:
#   ./audio_test.exp BF609-EZKIT audio_adau1761
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, audio_dev"
    puts "Refer to build_audio_kernel.exp for audio_dev."
    exit
}
set audio_dev [lindex $argv 1]
set log_name ${audio_dev}_test_log
log_file $log_name
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]
append TITLE " ($audio_dev)"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
source ../common/kernel_boot.exp

step "Start testing"
set count_under_run 0

proc alsa_rec_play {format channel rate file_type} {
    global case_num
    global kernel_prompt
    global count_under_run

    if { $channel == "Mono" } {
        set channel_num "1"
    } else {
        set channel_num "2"
    }

    incr case_num
    set timeout 15
    send -s "arecord -t $file_type -c $channel_num -f $format -r $rate -d 5 $file_type\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Input/output error.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    send -s "aplay $file_type\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Input/output error.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

proc alsa_rec2play {format channel rate file_type} {
    global case_num
    global kernel_prompt
    global count_under_run

    if { $channel == "Mono" } {
        set channel_num "1"
    } else {
        set channel_num "2"
    }

    incr case_num
    set timeout 15
    send -s "arecord -t $file_type -c $channel_num -f $format -r $rate -d 5 |aplay\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Input/output error.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}


spawn mpg123 -Z ./audiotest.mp3
set plaympeg_id $spawn_id

set spawn_id $kermit_spawn_id 

set case_num 0

send_log "\nPlease listen to the earphone or amplifier.\n\n"

sleep 10
set timeout 4
send "\n"
expect ">"

if { $audio_dev == "audio_adau1361" } {
    incr case_num
    set timeout 15
    send "amixer cset name='Headphone Playback Switch' on; amixer cset name='Headphone Playback Volume' 40; amixer cset name='Left Playback Mixer Left DAC Switch' on; amixer cset name='Right Playback Mixer Left DAC Switch' on; amixer cset name='Lineout Playback Switch' on; amixer cset name='Lineout Playback Volume' 40; amixer cset name='Left LR Playback Mixer Left Volume' 2; amixer cset name='Right LR Playback Mixer Right Volume' 2; amixer cset name='Aux Capture Volume' 7; amixer cset name='Digital Capture Volume' 255; amixer cset name='Input 1 Capture Volume' 7; amixer cset name='Input 2 Capture Volume' 7; amixer cset name='Input 3 Capture Volume' 7; amixer cset name='Input 4 Capture Volume' 7\r"
    while 1 {
        expect {
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

if { $audio_dev == "audio_adau1761" } {
    incr case_num
    set timeout 15
    send "amixer cset name='Headphone Playback Switch' on; amixer cset name='Headphone Playback Volume' 40; amixer cset name='Right Playback Mixer Right DAC Switch' on; amixer cset name='Left Playback Mixer Left DAC Switch' on; amixer cset name='DSP Bypass Playback Switch' on; amixer cset name='DSP Bypass Capture Switch' on; amixer cset name='Digital Capture Volume' 255; amixer cset name='Input 2 Capture Volume' 7; amixer cset name='Input 4 Capture Volume' 7;\r"
    while 1 {
        expect {
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

while 1 {
    alsa_rec_play S16_LE Stereo 8000 wav
    alsa_rec_play S16_LE Stereo 11000 wav
    alsa_rec_play S16_LE Stereo 22000 wav
    alsa_rec_play S16_LE Stereo 44100 wav
    alsa_rec_play S16_LE Stereo 48000 wav

    alsa_rec_play U8 Stereo 48000 wav
    alsa_rec_play U8 Stereo 8000 wav

    alsa_rec_play S16_LE Mono 44100 wav
    alsa_rec_play S16_LE Mono 11000 wav

    alsa_rec_play U8 Mono 22000 wav

    alsa_rec_play S24_LE Stereo 48000 wav
    alsa_rec_play S32_LE Stereo 48000 wav

    send_log "test play and record audio concurrently...\n"
    sleep 1
    set timeout 4
    send -s "\n"
    expect "> "

    alsa_rec2play S16_LE Stereo 8000 wav
    sleep 1
    alsa_rec2play S16_LE Stereo 48000 wav
    sleep 1
    alsa_rec2play S16_LE Mono 8000 wav
    sleep 1
    alsa_rec2play S16_LE Mono 48000 wav
    sleep 1
    alsa_rec2play U8 Mono 8000 wav
    sleep 1
    alsa_rec2play U8 Mono 48000 wav
    sleep 1

    send_log "record while play...\n"
    incr case_num
    set timeout 30
    send -s "arecord -t wav -c 2 -f S16_LE -r 11000 -d 15 aaa\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Input/output error.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "Stereo.*$kernel_prompt" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    send -s "aplay aaa &\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Input/output error.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "Playing WAVE" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
    send -s "\n"
    expect {
        -re $kernel_prompt {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "arecord -t wav -c 2 -f S16_LE -r 11000 -d 5 bbb\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Stereo.*$kernel_prompt" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    sleep 5
    expect {
        "Input/output error" {
            case_fail $case_num
	}
        timeout {
            send_user "ALSA lib test finish\n"
            case_pass $case_num
            break
        }
    }
}

incr case_num
if { $count_under_run == 0 } {
    send_user "No under run error\n"
    case_pass $case_num
} else {
    send_user "Under run error occurs $count_under_run times\n"
    case_fail $case_num
}

set spawn_id $plaympeg_id
send "\3\3"
sleep 1

all_pass
send_user "Ending $argv0\n"
log_file
