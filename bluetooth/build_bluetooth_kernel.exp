#!/usr/bin/expect
#
# Build script for bluetooth test, include both keyboard and audio.
#
# Usage:
#   ./build_bluetooth_kernel.exp board_type
#
# Example:
#   ./build_bluetooth_kernel.exp BEAGLE
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

cd $src_root/testsuites/common
source config_cut_app.exp

if [ catch { exec grep BR2_BFIN_FLAT=y $src_root/.config } ] {
    set binary_flat 0
} else {
    set binary_flat 1
}
send_user "\n#### binary_flat is $binary_flat. ####\n"


step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

# Bluetooth driver
        -re "Bluetooth subsystem support.*BT.*\\\[.*]" {
            send "Y\r"
        }

        -re "L2CAP protocol support.*BT_L2CAP.*\\\[.*]" {
            send "Y\r"
        }

        -re "SCO links support.*BT_SCO.*\\\[.*]" {
            send "Y\r"
        }

        -re "RFCOMM protocol support.*BT_RFCOMM.*\\\[.*]" {
            send "Y\r"
        }

        -re "RFCOMM TTY support.*BT_RFCOMM_TTY.*\\\[.*]" {
            send "Y\r"
        }

        -re "BNEP protocol support.*BT_BNEP.*\\\[.*]" {
            send "Y\r"
        }

        -re "Multicast filter support.*BT_BNEP_MC_FILTER.*\\\[.*]" {
            send "Y\r"
        }

        -re "Protocol filter support.*BT_BNEP_PROTO_FILTER.*\\\[.*]" {
            send "Y\r"
        }

        -re "HIDP protocol support.*BT_HIDP.*\\\[.*]" {
            send "Y\r"
        }

        -re "HCI USB driver.*BT_HCIBTUSB.*\\\[.*]" {
            send "Y\r"
        }

# USB support
        -re "Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {
#CONFIG_MTD_PHYSMAP claims the entire Async. Memory Space
#need to entirely disable it while using various U-Connector boards
            send "N\r"
        }

        -re "Bank 3.*BANK_3.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "0xAAC2\r"
            } else {
                send "\r"
            }
        }

        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "Y\r"
        }

        -re "Inventra Highspeed Dual Role Controller.*USB_MUSB_HDRC.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" || [string match "BF527-EZKIT*" $board_type] || $board_type == "BF609-EZKIT" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Platform Glue Layer \\\[.*]" {
            send "Y\r"
        }

        -re " (\[0-9]+). Blackfin.*USB_MUSB_BLACKFIN.*\[cC]hoice.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" || [string match "BF527-EZKIT*" $board_type] || $board_type == "BF609-EZKIT" } {
                send "$expect_out(1,string)\r"
            } else {
                send "\r"
            }
        }

        -re "ISP1362 HCD support \\\(USB_ISP1362_HCD\\\).*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "SL811HS HCD support.*USB_SL811_HCD.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            exit
        }
    }
}

step "user space config - need expat or libxml2 for DBUS and then bluez_utils"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "gettext \\\(BR2_PACKAGE_GETTEXT\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Use libgettext.a instead of libgettext.so.*BR2_PACKAGE_GETTEXT_STATIC.*\\\[.*]" {
            if { $binary_flat == 1 } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "expat \\\(BR2_PACKAGE_EXPAT\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "libxml2 \\\(BR2_PACKAGE_LIBXML2\\\) \\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "dbus \\\(BR2_PACKAGE_DBUS\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "bluez-utils \\\(BR2_PACKAGE_BLUEZ_UTILS\\\) \\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
