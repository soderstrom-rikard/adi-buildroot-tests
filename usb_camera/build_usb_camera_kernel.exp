#!/usr/bin/expect
#
# Build Kernel for USB camera test
#
# Usage:
#   ./build_usb_camera_kernel.exp board_type
#
# Example:
#   ./build_usb_camera_kernel.exp BF609-EZKIT
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $src_root/testsuites/common
step "Make clean"
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $src_root/testsuites/common
step "Make default config"
source  make_default_config.exp

cd $src_root/testsuites/common
source config_cut_app.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make ARCH=$arch linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

#Multimedia support
        -re "Multimedia support.*MEDIA_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video For Linux.*VIDEO_DEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video capture adapters.*VIDEO_CAPTURE_DRIVERS.*\\\[.*]" {
            send "Y\r"
        }

        -re "USB Video Class.*USB_VIDEO_CLASS.*\\\[.*]" {
            send "Y\r"
        }

# USB support
        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "Y\r"
        }

        -re "USB device class-devices.*USB_DEVICE_CLASS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Disable external hubs.*USB_OTG_BLACKLIST_HUB.*\\\[.*]" {
            send "Y\r"
        }

        -re "Inventra Highspeed Dual Role Controller.*USB_MUSB_HDRC.*\\\[./././.]" {
            send "Y\r"
        }

        -re "Platform Glue Layer \\\[.*]" {
            send "Y\r"
        }

        -re " (\[0-9]+). Blackfin.*USB_MUSB_BLACKFIN.*\[cC]hoice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Disable DMA \\\(always use PIO\\\).*MUSB_PIO_ONLY.*\\\[.*]" {
            send "\r"
        }

#Virtual terminal & frame buffer
        -re "I2C support \\\(I2C\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            send "Y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Framebuffer Console support.*FRAMEBUFFER_CONSOLE.*\\\[.*]" {
            send "Y\r"
        }

        -re "Select compiled-in fonts.*FONTS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Mac console 6x11 font.*FONT_6x11.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "SDL.*BR2_PACKAGE_SDL.*\\\[.*]" {
            # libsdl is required for ffplayer
            send "Y\r"
        }

        -re "ffmpeg.*BR2_PACKAGE_FFMPEG.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            break
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
