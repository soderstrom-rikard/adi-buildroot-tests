#!/usr/bin/expect
#
# Build Kernel for USB camera test
#
# Usage:
#   ./build_usb_camera_kernel.exp board_type
#
# Example:
#   ./build_usb_camera_kernel.exp BF609-EZKIT
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

# Command source_args can pass arguments while running source.
# Send bfin binary formats as argument for make_bfin-format.exp,
# and change to the specified bfin binary formats.
# It won't change formats for arm.
# make clean and source make_default_config.exp are already included.
cd $src_root/testsuites/common
step "Make config for specified bfin format"
source_args make_bfin-format.exp fdpic

cd $src_root/testsuites/common
source config_cut_app.exp

cd $src_root/testsuites/common
step "Kernel config for specified usb host"
source_args config_usb.exp musb dma


step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

# Need high system clock 250 MHz for bf609-ezkit
        -re "Re-program Clocks while Kernel boots.*BFIN_KERNEL_CLOCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "System Clock Divider.*SCLK_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

        -re "System Clock0 Divider.*SCLK0_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

        -re "System Clock1 Divider.*SCLK1_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

#Multimedia support
        -re "Multimedia support.*MEDIA_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video For Linux.*VIDEO_DEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video capture adapters.*VIDEO_CAPTURE_DRIVERS.*\\\[.*]" {
            send "Y\r"
        }

        -re "USB Video Class.*USB_VIDEO_CLASS.*\\\[.*]" {
            send "Y\r"
        }

#Virtual terminal & frame buffer
        -re "I2C support \\\(I2C\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            send "Y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Framebuffer Console support.*FRAMEBUFFER_CONSOLE.*\\\[.*]" {
            send "Y\r"
        }

        -re "Select compiled-in fonts.*FONTS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Mac console 6x11 font.*FONT_6x11.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Target ABI.*FDPIC.*FLAT.*FLAT_SEP_DATA.*SHARED_FLAT.*\\\[.*]" {
            send "1\r"
        }

        -re "SDL.*BR2_PACKAGE_SDL.*\\\[.*]" {
            # libsdl is required for ffplayer
            send "Y\r"
        }

        -re "ffmpeg.*BR2_PACKAGE_FFMPEG.*\\\[.*]" {
            send "Y\r"
        }

        -re "V4L2 video test program.*BR2_PACKAGE_V4L2_VIDEO_TEST.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
