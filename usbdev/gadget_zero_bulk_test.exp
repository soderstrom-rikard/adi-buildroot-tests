#!/usr/bin/expect

#
# bulk traffic test for Gadget Zero driver
#
# Usage:
#   ./gadget_zero_bulk_test.exp board_type  musb_mode
#
# Example:
#   ./gadget_zero_bulk_test.exp BF609-EZKIT dma
#

source ../common/kernel_config.exp
source configs/config.exp

if { $argc < 2} {
    puts "Please input: board_type, musb_mode(pio or dma)"
    exit
}
set musb_mode [lindex $argv 1]
set TITLE [title "$argv0"]
append TITLE " ($musb_mode)"
set log_name gadget_zero_bulk_${musb_mode}_test_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### musb_mode is $musb_mode. ####\n"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp


step "Start testing"
sleep 5
set case_num 0

if [ catch {exec make clean -f Makefile.testusb -C src} ] {
    send_user "FAIL: Make clean of testusb\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: Make clean of testusb\n"
}

if [ catch {exec make -f Makefile.testusb -C src} ] {
    send_user "FAIL: Build testusb\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: Build testusb\n"
}


spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "cd $src_root/testsuites/usbdev\r"
expect "#"
send "lsmod |grep usbtest\r"
while 1 {
    expect {
        -re "\r\n.*usbtest.*#" {
            case_pass $case_num
            break
        }
        -re "#" {
            send "sudo modprobe usbtest\r"
            while 1 {
                expect {
                    -re "modprobe:|\[eE]rror|\[fF]ail" {
                        case_fail $case_num
                    }
                    -re "Module usbtest not found.*#" {
                        send "sudo insmod $src_root/dl/usbtest.ko\r"
                        while 1 {
                            expect {
                                -re "insmod:|\[eE]rror|\[fF]ail" {
                                    case_fail $case_num
                                }
                                -re "#" {
                                    case_pass $case_num
                                    break
                                }
                                timeout {
                                    send "\3"
                                    expect "#"
                                    case_fail $case_num
                                }
                            }
                        }
                        break
                    }
                    -re "#" {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        send "\3"
                        expect "#"
                        case_fail $case_num
                    }
                }
            }
            break
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "lsmod |grep usbtest\r"
while 1 {
    expect {
        -re "\r\n.*usbtest.*#" {
            case_pass $case_num
            break
        }
        -re "#" {
            case_fail $case_num
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "sudo mount -t usbfs none /proc/bus/usb/\r"
while 1 {
    expect {
        -re "mount: none already mounted" {
            case_pass $case_num
            break
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 4
send "mount\r"
while 1 {
    expect {
        -re "none on /proc/bus/usb type usbfs.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $kermit_spawn_id

incr case_num
set timeout 5
send "modprobe g_zero\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Gadget Zero.*zero ready.*(high|full)-speed config.*source/sink" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_zero.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $host_spawn_id

sleep 2

incr case_num
set timeout 5
send "lsusb\r"
while 1 {
    expect {
        -re ".*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsusb|grep -i \"Gadget Zero\"|awk '{print \$2\" \"\$4}'\r"
while 1 {
    expect {
        -re "(\[0-9]+)( )(\[0-9]+)" {
            set gadget_bus "$expect_out(1,string)"
            set gadget_dev "$expect_out(3,string)"
            send_user "gadget_bus=$gadget_bus;gadget_dev=$gadget_dev\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set fail_count_t1 0
set fail_count_t3 0
set fail_count_t5 0
set fail_count_t7 0
set fail_count_t2 0
set fail_count_t4 0
set fail_count_t6 0
set fail_count_t8 0
set fail_count_at13 0
set cur_time [timestamp]
set end_time $cur_time
incr end_time $test_interval

for {set count 1} {$cur_time <= $end_time} {incr count} {
    set cur_time [timestamp]
    set timeout 10

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t1\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t1
                send_user "FAIL: testusb t1\n"
                break
            }
            timeout {
                incr fail_count_t1
                send_user "timeout: testusb t1\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t3\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t3
                send_user "FAIL: testusb t3\n"
                break
            }
            timeout {
                incr fail_count_t3
                send_user "timeout: testusb t3\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t5\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t5
                send_user "FAIL: testusb t5\n"
                break
            }
            timeout {
                incr fail_count_t5
                send_user "timeout: testusb t5\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t7\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t7
                send_user "FAIL: testusb t7\n"
                break
            }
            timeout {
                incr fail_count_t7
                send_user "timeout: testusb t7\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t2\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t2
                send_user "FAIL: testusb t2\n"
                break
            }
            timeout {
                incr fail_count_t2
                send_user "timeout: testusb t2\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t4\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t4
                send_user "FAIL: testusb t4\n"
                break
            }
            timeout {
                incr fail_count_t4
                send_user "timeout: testusb t4\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t6\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t6
                send_user "FAIL: testusb t6\n"
                break
            }
            timeout {
                incr fail_count_t6
                send_user "timeout: testusb t6\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t8\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_t8
                send_user "FAIL: testusb t8\n"
                break
            }
            timeout {
                incr fail_count_t8
                send_user "timeout: testusb t8\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -at13\r"
    while 1 {
        expect {
            -re "\[0-9]\\\.\[0-9]+ secs.*#" {
                case_pass $case_num
                break
            }
            -re "(error|-->).*#" {
                incr fail_count_at13
                send_user "FAIL: testusb at13\n"
                break
            }
            timeout {
                incr fail_count_at13
                send_user "timeout: testusb at13\n"
                case_fail $case_num
            }
        }
    }

    send_user "\n\ntest round $count finish\n\n"
}

incr case_num
set timeout 20
send "sudo modprobe -r usbtest\r"
while 1 {
    expect {
        -re "modprobe:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "Module usbtest not found.*#" {
            send "sudo rmmod $src_root/dl/usbtest.ko\r"
            while 1 {
                expect {
                    -re "rmmod:|\[eE]rror|\[fF]ail" {
                        case_fail $case_num
                    }
                    -re "#" {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        send "\3"
                        expect "#"
                        case_fail $case_num
                    }
                }
            }
            break
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "sudo umount /proc/bus/usb\r"
while 1 {
    expect {
        -re "umount:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 4
send "mount\r"
while 1 {
    expect {
        -re "none on /proc/bus/usb type usbfs.*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $kermit_spawn_id

incr case_num
set timeout 5
send "modprobe -r g_zero\r"
while 1 {
    expect {
        -re "modprobe:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_zero" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
if { $fail_count_t1 == 0 && $fail_count_t3 == 0 && $fail_count_t5 == 0 && $fail_count_t7 == 0 && $fail_count_t2 == 0 && $fail_count_t4 == 0 && $fail_count_t6 == 0 && $fail_count_t8 == 0 && $fail_count_at13 == 0} {
    send_user "No error when running testusb\n"
    case_pass $case_num
} else {
    send_user "test 1 fail $fail_count_t1 times\n"
    send_user "test 3 fail $fail_count_t3 times\n"
    send_user "test 5 fail $fail_count_t5 times\n"
    send_user "test 7 fail $fail_count_t7 times\n"
    send_user "test 2 fail $fail_count_t2 times\n"
    send_user "test 4 fail $fail_count_t4 times\n"
    send_user "test 6 fail $fail_count_t6 times\n"
    send_user "test 8 fail $fail_count_t8 times\n"
    send_user "test at13 fail $fail_count_at13 times\n"
    case_fail $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
