#!/usr/bin/expect
#
# File-backed Storage Gadget driver test with Linux host, using real storage device as backing storage.
#
# Usage:
#   ./gadget_storage_hd_test.exp board_type
#
# Example:
#   ./gadget_storage_hd_test.exp BF609-EZKIT
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, musb_mode(pio or dma)"
    exit
}
set musb_mode [lindex $argv 1]
set TITLE [title "$argv0"]
append TITLE " ($musb_mode)"
set log_name gadget_storage_hd_${musb_mode}_test_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### musb_mode is $musb_mode. ####\n"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp


step "Start testing."
set case_num 0
set dev_host "/dev/sdb"
set mnt_point "/mnt/usb"

if { $board_type == "BF548-EZKIT" } {
    set dev_target "sda"
    set partition_target "sda1"
} elseif { $board_type == "BF609-EZKIT" } {
    set dev_target "mmcblk0"
    set partition_target "mmcblk0p1"
}

set timeout 5
sleep 3
send "ifconfig eth0 $targetip\r"
sleep 3
send "\r"
expect -re $kernel_prompt

set timeout 9
incr case_num
send "dmesg|grep -i $dev_target\r"
while 1 {
    expect {
        -re "$dev_target:.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "FAIL: Storage not found\n"
            case_fail $case_num
        }
    }
}

set timeout 20
incr case_num
send "modprobe g_file_storage file=/dev/$dev_target stall=0\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "File-backed Storage Gadget.*gadget-lun0" {
            expect "speed config #1"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_file_storage.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mkdir -p $mnt_point\r"
while 1 {
    expect {
        -re "(mkdir:|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 10
incr case_num
set timeout 10
send "ls $dev_host\r"
while 1 {
    expect {
        -re "(ls:|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 90
send "time fdisk $dev_host\r"
while 1 {
    expect {
        -re "(fdisk:|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "Command.*:" {
            send "d\r"
            expect -re "Selected partition 1.*Command.*:"
            send "n\r"
            expect -re "primary.*:"
            send "p\r"
            expect -re "Partition number.*:"
            send "1\r"
            expect -re "First cylinder|sector.*:"
            send "\r"
            expect -re "Using default.*Last cylinder|sector.*:"
            send "+1G\r"
            expect -re "Command.*:"
            send "p\r"
            expect -re "Command.*:"
            send "w\r"
            while 1 {
                expect {
                    -re "kernel still uses the old table|\[eE]rror|\[fF]ail" {
                        case_fail $case_num
                    }
                    -re "Syncing disks" {
                        send "\r"
                        expect "#"
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

append dev_host "1"

incr case_num
set timeout 120
send "mke2fs $dev_host\r"
while 1 {
    expect {
        -re "Writing inode tables.*done.*done.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t ext2 -o sync $dev_host $mnt_point\r"
while 1 {
    expect {
        -re "(mount:|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 120
send "time dd if=/dev/zero of=$mnt_point/10m.bin bs=1M count=10\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "time cat $mnt_point/10m.bin > /dev/null\r"
while 1 {
   expect {
     -re "real.*user.*sys.*#" {
         case_pass $case_num
         break
     }
     timeout {
         case_fail $case_num
      }
   }
}

incr case_num
set timeout 5
send "ls -l $mnt_point\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "10m\.bin.*lost\\+found.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "rm $mnt_point/10m.bin\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "ls -l $mnt_point/\r"
while 1 {
    expect {
        -re "(10m\.bin|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "umount $mnt_point\r"
while 1 {
    expect {
        -re "(umount:|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set spawn_id $kermit_spawn_id
send "\n"
expect -re $kernel_prompt

incr case_num
set timeout 80
send "time modprobe -r g_file_storage\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_file_storage" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
