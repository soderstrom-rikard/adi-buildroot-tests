#!/usr/bin/expect

#
# USB device driver test for Ethernet over USB with Windows host
#
# Usage:
#   ./gadget_ethernet_win_test.exp board_type musb_mode
#
# Example:
#   ./gadget_ethernet_win_test.exp BF609-EZKIT dma
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, musb_mode(pio or dma)"
    exit
}
set musb_mode [lindex $argv 1]
set TITLE [title "$argv0"]
append TITLE " ($musb_mode)"
set log_name gadget_ethernet_win_${musb_mode}_test_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### musb_mode is $musb_mode. ####\n"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp


step "Start testing."
set case_num 0
set usb0_addr "192.168.1.66"
set usb_host  "192.168.1.56"

sleep 3

incr case_num
set timeout 5
send "modprobe g_ether host_addr=00:dc:c8:f7:75:05 dev_addr=00:dd:dc:eb:6d:f1\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Ethernet Gadget.*RNDIS ready.*(high|full) speed.*using RNDIS" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_ether.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "ifconfig usb0 $usb0_addr up\r"
sleep 3
send "\r"
expect -re $kernel_prompt

incr case_num
set timeout 10
send "ifconfig usb0\r"
while 1 {
    expect {
        -re "$usb0_addr.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

puts "In Windows, set USB ethernet controller's IP address to $usb_host, connect to Windows host"
puts "If you are ready, press \"y\" and enter:"
set timeout 120
while 1 {
    expect_user {
        -re "\[yY]" {
            break
        }
        timeout {
            send_user "quit this test\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 120
send "ping -c 100 $usb_host\r"
while 1 {
    expect {
        -re "100 packets transmitted, (100|9..) packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect $kernel_prompt
            case_fail $case_num
        }
    }
}

puts "Test from Window's host side, time: 20 mins"
puts "If pass, press \"y\" and enter; If fail, press \"n\" and enter: "
incr case_num
set timeout 300
while 1 {
    expect_user {
        -re "\[yY]" {
            case_pass $case_num
            break
        }
        -re "\[nN]" {
            case_fail $case_num
        }
        timeout {
            send_user "quit this test\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "modprobe -r g_ether\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_ether" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
