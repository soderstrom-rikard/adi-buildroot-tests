#!/usr/bin/expect

#
# USB device driver test for Ethernet over USB with Linux host
#
# Usage:
#   ./gadget_ethernet_test.exp board_type musb_mode
#
# Example:
#   ./gadget_ethernet_test.exp BF609-EZKIT dma
#

source ../common/kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, musb_mode(pio or dma)"
    exit
}
set musb_mode [lindex $argv 1]
set TITLE [title "$argv0"]
append TITLE " ($musb_mode)"
set log_name gadget_ethernet_${musb_mode}_test_log

log_file $log_name
send_user "Starting $argv0\n"
send_user "\n#### musb_mode is $musb_mode. ####\n"


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# Different bootargs can be set here.
# For example:
# set bootargs $bootargs_param1
source ../common/kernel_boot.exp

set case_num 0
set fail_count 0
set usb_peripheral "192.168.1.66"
set usb_host  "192.168.1.56"
sleep 3

step "Gadget Ethernet config in peripheral board"

incr case_num
set timeout 5
send "modprobe g_ether host_addr=00:dc:c8:f7:75:05 dev_addr=00:dd:dc:eb:6d:f1\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Ethernet Gadget.*g_ether ready.*(high|full)-speed.*CDC Ethernet" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_ether.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "ifconfig usb0 $usb_peripheral up\r"
sleep 3
send "\r"
expect -re $kernel_prompt

incr case_num
set timeout 10
send "ifconfig usb0\r"
while 1 {
    expect {
        -re "$usb_peripheral.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


step "Gadget Ethernet config in host PC"

spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "ifconfig eth2 $usb_host\r"
while 1 {
    expect {
        -re "(No such device|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $host_spawn_id 
sleep 10
set max_count 10

step "ping flood test (host -> target)"
for {set count 0} {$count < $max_count} { incr count} {
    incr case_num
    set timeout 30
    send "ping -f -l50 -c 1000 $usb_peripheral\r"
    while 1 {
        expect {
            -re "1000 packets transmitted, (1000|9\[5-9].) received.*#" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "FAIL: ping flood test (host -> target)\r"
                incr fail_count
                send "\3"
                expect "#"
                break
            }
        }
    }

    incr case_num
    set timeout 30
    send "ping -f -l50 -c 10000 $usb_peripheral\r"
    while 1 {
        expect {
            -re "10000 packets transmitted, (10000|9\[5-9]..) received.*#" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "FAIL: ping flood test (host -> target)\r"
                incr fail_count
                send "\3"
                expect "#"
                break
            }
        }
    }
}

step "ping size test (host -> target)"
for {set size 1024} {$size <= 4096 } { incr size 512} {
    for {set count 0} {$count < $max_count} { incr count} {
        incr case_num
        set timeout 20
        send "ping -c 1 -s $size $usb_peripheral\r"
        while 1 {
            expect {
                -re "wrong data byte #.*#" {
                    send_user "FAIL: ping size test (host -> target)\r"
                    incr fail_count
                    break
                }
                -re "1 packets transmitted, 1 received.*#" {
                    case_pass $case_num
                    break
                }
                -re ":.*#" {
                    send_user "FAIL: ping size test (host -> target)\r"
                    incr fail_count
                    break
                }
                timeout {
                    send_user "FAIL: ping size test (host -> target)\r"
                    incr fail_count
                    send "\3"
                    expect "#"
                    break
                }
            }
        }
        sleep 2
    }
}


set spawn_id $kermit_spawn_id

step "ping test (target -> host)"
incr case_num
set timeout 600
send "ping -c 100 $usb_host\r"
while 1 {
    expect {
        -re "100 packets transmitted, (100|9\[5-9]) packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect -re $kernel_prompt
            case_fail $case_num
        }
    }
}

step "ping size test (target -> host)"
for {set size 1024} {$size <= 4096 } { incr size 512} {
    for {set count 0} {$count < $max_count} { incr count} {
        incr case_num
        set timeout 20
        send "ping -c 1 -s $size $usb_host\r"
        while 1 {
            expect {
                -re "wrong.*$kernel_prompt" {
                    send_user "FAIL: ping size test (target -> host)\r"
                    incr fail_count
                    break
                }
                -re "1 packets transmitted, 1 packets received.*$kernel_prompt" {
                    case_pass $case_num
                    break
                }
                -re $kernel_prompt {
                    send_user "FAIL: ping size test (target -> host)\r"
                    incr fail_count
                    break
                }
                timeout {
                    send_user "FAIL: ping size test (target -> host)\r"
                    send "\3"
                    expect "#"
                    incr fail_count
                    break
                }
            }
        }
        sleep 2
    }
}


step "Clean Gadget Ethernet driver at the end of testing cycle"

incr case_num
set timeout 5
send "modprobe -r g_ether\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_ether" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
if { $fail_count == 0 } {
    send_user "PASS: all test case\n"
    case_pass $case_num
} else {
    send_user "FAIL: $fail_count times\n"
    case_fail $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
