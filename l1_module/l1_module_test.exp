#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

step "Start testing."
sleep 10
set module_name hello.ko
set case_num 0

send "ifconfig eth0 $targetip up\r"
expect -re $kernel_prompt
sleep 3

incr case_num
set timeout 5
send "ifconfig\r"
while 1 {
   expect {
      -re "$targetip.*$kernel_prompt" {
         send_user "ifconfig set success.\n"
         case_pass $case_num
         break
      }
      timeout {
         send_user "Fail ifconfig."
         case_fail $case_num
         }
     }
}

if [ catch { exec make clean } ] {
    send_user "\nFAIL: Clean src directory\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "\nPASS: Clean src directory\n"
}

if [ catch { exec make } ] {
    send_user "\nFAIL: Build test program\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "\nPASS: Build test program\n"
}

if [ file exists $module_name ] {
    send_user "$module_name has been built out.\n"
}

if [ catch { exec rcp $module_name root@$targetip:/ } ] {
    send_user "\nFAIL: Copy $module_name to target board\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "\nPASS: Copy $module_name to target board\n"
}

set insert_output    "code function addr = 0xffa0\[0-9a-f]\{4\}\r\n"
append insert_output ".*data variable addr = 0xff80\[0-9a-f]\{4\}, data value is 0\r\n"
append insert_output ".*bss  variable addr = 0xff80\[0-9a-f]\{4\}, bss value is 0\r\n"
append insert_output ".*data variable addr = 0xff90\[0-9a-f]\{4\}, data value is 0\r\n"
append insert_output ".*bss  variable addr = 0xff90\[0-9a-f]\{4\}, bss value is 0"

incr case_num
set timeout 10
send "insmod $module_name\r" 
while 1 {   
    expect {
        -re "$insert_output.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r" 
while 1 {
    expect {
        -re "hello.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "rmmod $module_name\r" 
while 1 {
    expect {
        -re "(\[fF]ail|rmmod:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "lsmod\r" 
while 1 {
    expect {
        -re "hello.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
