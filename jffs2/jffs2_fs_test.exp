#!/usr/bin/expect

source ../common/kernel_config.exp
source ../common/board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."

if { $board_type == "BF537-STAMP" || $board_type == "BF561-EZKIT" || $board_type == "BF548-EZKIT" || [string match "BF527-EZKIT*" $board_type] || $board_type == "BF609-EZKIT" } {
    set bootargs  $bootargs_param4
}

source ../common/reboot_kernel.exp

step "Starting test."
set case_num 0

incr case_num
send "cd /bin\r"
while 1 {
    expect {
        "bin" {
            set flag 1
            break
        }
        timeout {
            break
        }
    }
}

set timeout 500
expect "root:/bin>"

send -s  "./fs_test.sh\r"
while 1 {
    expect {
        "Execution completed" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 10
incr case_num
set timeout 10
send -s "ls -l TestFailed.log\r"
while 1 {
    expect {
        -re "rw.* .* .* .* (\[0-9]+) .*TestFailed\.log" {
            set FileSize $expect_out(1,string)
            expect ">"
            puts " FileSize $expect_out(1,string)"
            break
        }
        timeout {
            break
        }
    }
}

if { $FileSize == 0 } {
    case_pass $case_num
} else {
    case_fail $case_num
}

set timeout 500
spawn ftp $targetip
while 1 {
    expect {
        "Name" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }
    send -s "root\r"
    expect {
        "Password:" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }
    send -s "uClinux\r"
    expect {
        "ftp>" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }

    send -s "cd /bin\r"
    expect {
        "ftp>" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }

    send -s "get TestOverall.log\r"
    expect {
        "ftp>" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }

    send -s "get TestResults.log\r"
    expect {
        "ftp>" { }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }

    send -s "bye\r"
    expect {
        "Goodbye" { break }
        timeout {
            send_user "Failed first return\n"
            break
        }
    }

}

all_pass
send_user "Ending $argv0\n"
log_file
