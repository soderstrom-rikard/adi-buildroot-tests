#!/usr/bin/expect
#
# Build script for power management test.
#
# Usage:
#   ./build_power_kernel.exp board_type
#
# Example:
#   ./build_power_kernel.exp BF537-STAMP
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make ARCH=$arch linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Suspend to RAM and standby.*SUSPEND.*\\\[.*]" {
            send "Y\r"
        }

# Disable some drivers as PM is not well supported
        -re "High Resolution Timer Support.*HIGH_RES_TIMERS.*\\\[.*]" {
            send "N\r"
        }

        -re "CPU Frequency scaling \\\(CPU_FREQ\\\) \\\[.*]" {
            send "N\r"
        }

        -re "Memory Technology Device \\\(MTD\\\) support \\\(MTD\\\) \\\[.*]" {
            send "N\r"
        }

        -re "Networking support \\\(NET\\\) \\\[.*]" {
            send "N\r"
        }

        -re "SCSI device support \\\(SCSI\\\) \\\[.*]" {
            send "N\r"
        }

        -re "Blackfin Rotary support.*INPUT_BFIN_ROTARY.*\\\[.*]" {
            send "N\r"
        }

        -re "I2C support \\\(I2C\\\) \\\[.*]" {
            send "N\r"
        }

        -re "SPI support \\\(SPI\\\) \\\[.*]" {
            send "N\r"
        }

        -re "Watchdog Timer Support.*WATCHDOG.*\\\[.*]" {
            send "N\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "N\r"
        }

        -re "HID Devices.*HID_SUPPORT.*\\\[.*]" {
            send "N\r"
        }

        -re "USB support \\\(USB_SUPPORT\\\) \\\[.*]" {
            send "N\r"
        }

        -re "MMC/SD/SDIO card support \\\(MMC\\\) \\\[.*]" {
            send "N\r"
        }

        -re "Miscellaneous filesystems.*MISC_FILESYSTEMS.*\\\[.*]" {
            send "N\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            break
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
