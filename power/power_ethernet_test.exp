#!/usr/bin/expect
#
# Test PM in ethernet driver
#
# Usage:
#   ./power_ethernet_test.exp board_type
#
# Example:
#   ./power_ethernet_test.exp BF609-EZKIT
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

if { $argc == 2 } {
    set pm_state_count [lindex $argv 1]
} else {
    puts "Please input a power management state:"
    puts "1: Standby; 2: Suspend-to-RAM"
    exit
}

if { $board_type == "BF548-EZKIT" }  {
    set wakeup_pattern "Syncing filesystems.*Freezing user space processes \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nFreezing remaining freezable tasks \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nSuspending console\\\(s\\\).*Restarting.*SD card"
} else {
    set wakeup_pattern "Syncing filesystems.*Freezing user space processes \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nFreezing remaining freezable tasks \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nSuspending console\\\(s\\\).*Restarting tasks.*done"
}

if { $pm_state_count == 1 } {
    set pm_state_str "standby"
    append TITLE " (STANDBY)"
} elseif { $pm_state_count == 2 } {
    set pm_state_str "mem"
    append TITLE " (SUSPEND-TO-RAM)"
    if { $board_type == "BF533-STAMP" || $board_type == "BF533-EZKIT" }  {
        set wakeup_pattern "wakeup from.*rtcwake: short write.*$kernel_prompt"
    }
} else {
    send_user "Power Management State setting error\n"
    exit
}


step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../common/kernel_boot.exp

set wait_time 10
set standby_fail 0

proc standby_test_case1 {} {
    global case_num
    global kernel_prompt
    global wait_time
    global targetip
    global serverip
    global standby_fail
    global pm_state_str
    global wakeup_pattern

    set timeout [expr $wait_time + 10]
    incr case_num
    send "\nrtcwake -s $wait_time -m $pm_state_str\r"
    while 1 {
        expect {
            -re $wakeup_pattern {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Test case 1: Wake up fail\n"
                incr standby_fail
                break
            }
        }
    }

    set timeout 5
    expect -re "Full\r\n|lpa 0x41E1\r\n"

    set timeout 5
    incr case_num
    send "ifconfig\r"
    while 1 {
        expect {
            -re "eth0.*$targetip.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "set ip $targetip failed\r"
                case_fail $case_num
            }
        }
    }

    sleep 2
    set timeout 20
    send "ping $serverip -c 5\r"
    while 1 {
        expect {
            -re "5 packets transmitted, 5 packets received, 0% packet loss.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "ping $serverip failed\r"
                case_fail $case_num
            }
        }
    }
}

proc standby_test_case2 {} {
    global case_num
    global kernel_prompt
    global wait_time
    global targetip
    global serverip
    global pack_num
    global standby_fail
    global pm_state_str
    global wakeup_pattern

    set timeout [expr $wait_time + 10]
    incr case_num
    send "\nrtcwake -s $wait_time -m $pm_state_str\r"
    while 1 {
        expect {
            -re $wakeup_pattern {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Test case 2: Wake up fail\n"
                incr standby_fail
                break
            }
        }
    }

    set timeout 5
    expect -re "Full\r\n|lpa 0x41E1\r\n"

    set timeout 30
    incr pack_num 15
    send_user "pack_num=$pack_num\r"
    while 1 {
        expect {
            -re "64 bytes from $serverip: seq=$pack_num ttl=64 time=" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "ping $serverip failed\r"
                case_fail $case_num
            }
        }
    }
}


step "Start testing"
set case_num 0
set timeout 15
set Total_Count 5
sleep 5
send "\r"
expect -re $kernel_prompt
expect -re "Up.*Full"

set timeout 20
incr case_num
send "ping $serverip -c 5\r"
while 1 {
    expect {
        -re "5 packets transmitted, 5 packets received, 0% packet loss.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "ping $serverip failed\r"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/mounts\r"
while 1 {
    expect {
        -re "sysfs /sys sysfs rw,nosuid,nodev,noexec.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "ls /sys/power\r"
while 1 {
    expect {
        -re "state.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

for {set count 1} {$count <= $Total_Count} {incr count} {
    standby_test_case1
    send_user "\nStandby test case 1 round $count pass\n\n"
}

set timeout 20
incr case_num
send "ping $serverip&\r"
while 1 {
    expect {
        -re "64 bytes from $serverip: seq=2 ttl=64 time=" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "ping $serverip failed\r"
            case_fail $case_num
        }
    }
}

set pack_num 10
for {set count 1} {$count <= $Total_Count} {incr count} {
    standby_test_case2
    send_user "\nStandby test case 2 round $count pass\n\n"
}

incr case_num
if { $standby_fail == 0 } {
    send_user "Wake up pass\n"
    case_pass $case_num
} else {
    send_user "Wake up fail $standby_fail times\n"
    case_fail $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
