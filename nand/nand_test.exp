#!/usr/bin/expect

source ../common/kernel_config.exp
source ../common/board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

sleep 10

set nand_rootfs_num "x"
set case_num 0

step "Locate the partition."
incr case_num
set timeout 20
send -s "dmesg\r"
while 1 {
    expect {
        -nocase -re "\".*NAND.*\".*(0x\[0-9a-fA-F]+-0x\[0-9a-fA-F]+)\[\x20\t]+:\[\x20\t]+\"(.*kernel.*)\"\r\n(0x\[0-9a-fA-F]+-0x\[0-9a-fA-F]+)\[\x20\t]+:\[\x20\t]+\"(.*file.*)\"\r\n" {
            set kernel_partition_address $expect_out(1,string)
            set kernel_partition_name $expect_out(2,string)
            set rootfs_partition_address $expect_out(3,string)
            set rootfs_partition_name $expect_out(4,string)
            expect -re $kernel_prompt
            case_pass $case_num
            break;
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Show file systems."
incr case_num
set timeout 10
send -s "cat /proc/filesystems\r"
while 1 {
    expect {
        -re "ubifs.*$kernel_prompt" {
            case_pass $case_num
            break;
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "MTD test"
set list [ split $rootfs_partition_name "" ]
if { [ lsearch  $list "(" ] > 0 } {
    set i [ lsearch  $list "(" ]
    set list2  [ linsert  $list $i "\\" ]
    set j [ lsearch  $list2 ")" ]
    set list3 [ linsert  $list2 $j "\\" ]
    set rootfs_partition_name [ join $list3 "" ]
    puts "Rootfs_partition_name is $rootfs_partition_name."
} else {
    set rootfs_partition_name [ join $list "" ]
}

incr case_num
set timeout 5
send -s "cat /proc/mtd\r"
while 1 {
    expect {
        -re "mtd(\[0-9]):\[0-9a-fA-F ]+\"$rootfs_partition_name\".*$kernel_prompt" {
            set nand_rootfs_num $expect_out(1,string)
            send_user "Nand_rootfs_num is $nand_rootfs_num\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Detect UBI "
incr case_num
set timeout 80
send -s "ubinfo\r"
while 1 {
    expect {
        -re "UBI control device major/minor.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Format MTD "
incr case_num
set timeout 500
send -s "ubiformat /dev/mtd$nand_rootfs_num -s 512 -O 512\r"
while 1 {
    expect {
        -re "ubiformat:.*\\\(yes/no\\\)" {
            send "yes\r"
        }
        -re "ubiformat: formatting eraseblock .* complete.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Attach MTD "
incr case_num
set timeout 180
send -s "ubiattach /dev/ubi_ctrl -m $nand_rootfs_num\r"
while 1 {
    expect {
        -re "UBI: attaching .* to ubi0.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Make volume "
incr case_num
set timeout 180
send -s "ubimkvol /dev/ubi0 -s 20000000 -N ubifs0; ls /dev\r"
while 1 {
    expect {
        -re "ubi0_0.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 180
send -s "cat /proc/mtd\r"
while 1 {
    expect {
        -re "ubifs0.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Touch file"
send_log "\n1)create file system directory\n"
send -s "mkdir -p rootfs\r"
expect -re $kernel_prompt
send_log "\n2)create test file\n"
send -s "echo This is test for mtd driver > rootfs/test\r"
expect -re $kernel_prompt


step "Reading MTD "
incr case_num
set timeout 200
send -s "mount -t ubifs ubi0:ubifs0 /mnt\n"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|mount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "UBIFS: mounted UBI device.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "cp pwd to FS."
incr case_num
set timeout 60
send -s "cp /bin/pwd /mnt\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|cp:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 1

step "Validating data integrity"
incr case_num
set timeout 60
send "while \[ 1 \]; do md5sum /mnt/pwd ; done\r"
while 1 {
    expect {
        -re "\[0-9a-z]+  /mnt/pwd" {
            sleep 3
            send "\3"
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Writing to FS"
incr case_num
set timeout 60
send -s "cp /rootfs/test /mnt\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|cp:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Verify "
incr case_num
set timeout 5
send -s "cmp /rootfs/test /mnt/test\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|cmp:|differ).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send -s "umount /mnt\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|umount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "UBIFS: un-mount UBI device.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2
send -s "ls /mnt\r"
while 1 {
    expect {
        -re "test.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Make volume "
incr case_num
set timeout 180
send -s "ubimkvol /dev/ubi0 -s 20000000 -N ubifs1; ls /dev\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "ubi0_1.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 180
send -s "ubiupdatevol /dev/ubi0_1 $ubifs_rootfs_image\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Reading MTD "
incr case_num
set timeout 200
send -s "mount -t ubifs ubi0:ubifs1 /mnt\n"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|mount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "UBIFS: mounted UBI device.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send -s "ls /mnt\r"
while 1 {
    expect {
        -re "sys.*var.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send -s "dd if=/dev/zero of=5meg bs=1M count=5\r"
while 1 {
    expect {
        -re "records in.*records out.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
send -s "while : ; do cat 5meg > /mnt/foo ; date ; done\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_fail $case_num
        }
        timeout {
            case_pass $case_num
            break
        }
    }
}

if { $board_type != "BF527-EZKIT" && $board_type != "BF526-EZBRD" } {

spawn /bin/sh
set telnet_spawn_id $spawn_id

incr case_num
set timeout 20
expect -re $sh_prompt
send -s "telnet $targetip\r"
expect {
       "login:" {  }
       timeout { send_user "Failed telnet login\n"
       }
}

send -s "root\r"
expect {
    -re $kernel_prompt {
        case_pass $case_num
    }
    timeout {
        send_user "Failed inital telnet\n"
        case_fail $case_num
    }
}

incr case_num
set timeout 20
send -s "watch -n 1 ps\r"
while 1 {
    expect {
        -re "Every 1s: ps" {
            send_log "Start watching ps process...\n"
            expect {
                -re $kernel_prompt {
                }
                timeout {
                    send_log "Finish watching ps process.\n"
                    send "\3"
                    expect -re $kernel_prompt
                    break
                }
            }
        }
        timeout {
            case_fail $case_num
        }
    }
}

}
set spawn_id $kermit_spawn_id
set timeout 15
send -s "\3"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send -s "umount /mnt\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No|umount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "UBIFS: un-mount.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 60
send -s "ubidetach -d 0 /dev/ubi_ctrl\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "UBI:.* is detached from ubi.*$kernel_prompt" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if { $board_type != "BF527-EZKIT" && $board_type != "BF526-EZBRD" } {
step "Reboot the kernel."
set boot_image vmImage
set bootargs   $bootargs_param11
source ../common/reboot_kernel.exp

incr case_num
set timeout 5
send -s "dmesg|grep -i ubifs\r"
while 1 {
    expect {
        -re "Mounted root \\\(ubifs filesystem\\\).*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
}

all_pass
send_user "Ending $argv0\n"
log_file
