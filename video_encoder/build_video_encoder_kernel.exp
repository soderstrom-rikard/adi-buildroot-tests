#!/usr/bin/expect
#
# Build script for video encoder driver test for adv7511.
#
# Usage:
#   ./build_video_encoder_kernel.exp board_type video_dev
#   video_dev: adv7511
#
# Example:
#   ./build_video_encoder_kernel.exp BF609-EZKIT adv7511
#

source ../common/kernel_config.exp

if { $argc == 2} {
    set video_dev [lindex $argv 1]
} else {
    set video_dev adv7511
}

set log_name build_video_encoder_${video_dev}_kernel_log
log_file $log_name

send_user "Starting $argv0\n"
send_user "\n#### build kernel for $video_dev\n"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

# Disable to avoid confliction
        -re "MMC/SD/SDIO card support \\\(MMC\\\).*\\\[.*]" {
            send "N\r"
        }

        -re "Memory Technology Device \\\(MTD\\\) support \\\(MTD\\\).*\\\[.*]" {
            if { [string match "BF6*" $board_type] } {
                send "N\r"
            } else {
                send "\r"
            }
        }

# I2C is required
        -re "I2C support.*I2C.*\\\[.*]" {
            send "Y\r"
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            send "Y\r"
        }

# Large cache is required
        -re "Uncached DMA region.*(\[0-9]). Enable 32M DMA region.*DMA_UNCACHED_32M.*\[cC]hoice.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "$expect_out(1,string)\r"
            } else {
                send "\r"
            }
        }

# Need high system clock 250 MHz for bf609-ezkit
        -re "Re-program Clocks while Kernel boots.*BFIN_KERNEL_CLOCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "System Clock Divider.*SCLK_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

        -re "System Clock0 Divider.*SCLK0_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

        -re "System Clock1 Divider.*SCLK1_DIV.*\\\[.*]" {
            if { $board_type == "BF609-EZKIT" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

#Multimedia support
        -re "Multimedia support.*MEDIA_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Media Controller API.*MEDIA_CONTROLLER.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video For Linux.*VIDEO_DEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video capture adapters.*VIDEO_CAPTURE_DRIVERS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Analog Devices ADV7511 HDMI transmitter.*VIDEO_ADV7511.*\\\[.*]" {
            send "Y\r"
        }

        -re "V4L platform devices.*V4L_PLATFORM_DRIVERS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Blackfin Video Display Driver.*VIDEO_BLACKFIN_DISPLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "V4L2 video test program.*BR2_PACKAGE_V4L2_VIDEO_TEST.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
