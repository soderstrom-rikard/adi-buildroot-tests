#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

step "Start testing"
set case_num 0

set timeout 10
incr case_num
send "dmesg|grep pcmcia\r"
while 1 {
    expect {
        -re "bfin_cf_pcmcia: Blackfin CompactFlash.*pcmcia: registering new device pcmcia0.0.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
send -s "pccardctl ident\r"
while 1 {
    expect {
        -re "product info.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
send -s "pccardctl status\r"
while 1 {
    expect {
        -re "Subdevice.*bound to driver.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 120
while 1 {
    incr case_num
    send "fdisk /dev/sda\r"
    expect {
        -re "Command .*:" {		
        }
        timeout {
            case_fail $case_num
        }
    }

    send "p\r"
    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "d\r"
    expect {
        -re "Partition number.*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "1\r"
    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "n\r"
    expect {
        -re "Command action.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "p\r"
    expect {
        -re "Partition number.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "1\r"
    expect {
        -re "First cylinder.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "\r"
    expect {
        -re "Last cylinder.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "+2M\r"
    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "w\r"
    expect {
        -re "altered.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "mke2fs /dev/sda1\r"
while 1 {
    expect {
        -re "Filesystem label.*$kernel_prompt" {
            send_user "mke2fs done, test pass\n"
            case_pass $case_num
            break
        }
        -re "\[Ee]rror|failed.*$kernel_prompt" {
            send_user "mke2fs fail, test fail\n"
            case_fail $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "mount /dev/sda1 /mnt\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail|No|mount:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "cp /bin/pwd /mnt\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail|No|cp:).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "ls -al /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "time cat /mnt/pwd > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "cat /proc/filesystems\r"
while 1 {
    expect {
        -re "ext2.*vfat.*msdos.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "df\r"
while 1 {
    expect {
        -re "/dev/sda1.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "while \[ 1 \]; do md5sum /mnt/pwd ; done\r"
while 1 {
    expect {
        -re "\[0-9a-z]+  /mnt/pwd" {
            sleep 3
            send "\3"
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "umount /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 20
incr case_num
send "pccardctl eject 0\r\r"
while 1 {
    expect {
        -re "card ejected from slot 0.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
