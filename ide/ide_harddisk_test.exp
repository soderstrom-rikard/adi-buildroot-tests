#!/usr/bin/expect

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../common/spawn_kermit.exp

step "Reboot the kernel."
source ../common/reboot_kernel.exp

step "Start testing"
set timeout 120
set case_num 0

incr case_num
send "dmesg|grep sd\r"
while 1 {
    expect {
        "sda: sda1" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

while 1 {
    incr case_num
    send "fdisk /dev/sda\r"
    expect {
        -re "Command .*:" {		
        }
        timeout {
            case_fail $case_num
        }
    }

    send "p\r"
    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "d\r"
    expect {
        -re "Partition number.*:" {
            send "1\r"
        }

        -re "Selected partition 1" {
        }
        timeout {
            case_fail $case_num
        }
    }

    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "n\r"
    expect {
        -re "Command action.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "p\r"
    expect {
        -re "Partition number.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "1\r"
    expect {
        -re "First cylinder.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "\r"
    expect {
        -re "Last cylinder.*" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "+500M\r"
    expect {
        -re "Command .*:" {
        }
        timeout {
            case_fail $case_num
        }
    }

    send "w\r"
    expect {
        -re "altered." {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

#incr case_num
#set timeout 5
#send "mdev -s\r"
#while 1 {
#    expect {
#        -re "$kernel_prompt" {
#            case_pass $case_num
#            break
#        }
#        timeout {
#            case_fail $case_num
#        }
#    }
#}

sleep 5
incr case_num
send "mke2fs /dev/sda1\r"
while 1 {
    expect {
        -re "Filesystem.*$kernel_prompt" {
            expect -re "$kernel_prompt"
            case_pass $case_num
            break
        }

        -re "failed|No|error " {
                case_fail $case_num
                exit
        }

        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "mount /dev/sda1 /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
 
        -re "failed|No " {
                case_fail $case_num
                exit
        }

        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "cp /bin/pwd /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
set timeout 20
incr case_num
send "ls -al /mnt\r"
while 1 {
    expect {
        -re "pwd.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set filesystems 0
send "cat /proc/filesystems\r"
while 1 {
    expect {
        -re "vfat" {
            incr filesystems
        }

        -re "msdos" {
            incr filesystems
        }

        -re "$kernel_prompt" {
            if { $filesystems == 2 } {
                send_log "The two fs -- vfat and msdos are found!\n"
                case_pass $case_num
            } else {
                send_log "Not both of the vfat and msdos are found!\n"
                case_fail $case_num
            }
            break
        }

        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "df\r"
while 1 {
    expect {
        -re "/dev/sda1.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time dd conv=fsync if=/dev/zero of=/mnt/test.bin bs=1M count=100\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            send_user "Generate file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/test.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
send "while \[ 1 \]; do md5sum /mnt/pwd ; done\r"
while 1 {
    expect {
        -re "\[0-9a-z]+  /mnt/pwd" {
            sleep 3
            send "\3"
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "umount /mnt\r"
while 1 {
    expect {
        -re "umount.*failed.*$kernel_prompt" {
            send_user "umount failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount timeout, test fail\n"
            case_fail $case_num
        }
    }
}


step "Start bonnie++ test"

incr case_num
send "mke2fs /dev/sda1\r"
while 1 {
    expect {
        -re "Filesystem.*$kernel_prompt" {
            case_pass $case_num
            break
        }

        -re "failed|No|error " {
                case_fail $case_num
                exit
        }

        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "mount /dev/sda1 /mnt\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 3600
incr case_num
send "time bonnie++ -u root -d /mnt -s 100M\r"
while 1 {
    expect {
        -re "Hardware Trace" {
            set timeout 30
            expect -re $kernel_prompt
            send_user "bonnie++ failed\n"
            case_fail $case_num
        }
        -re "Latency.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "bonnie++ timeout\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
