#!/usr/bin/expect

source  ../common/kernel_config.exp

log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $src_root/testsuites/common
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $src_root/testsuites/common
step "Make default config"
source  make_default_config.exp

cd $src_root/testsuites/common
source  cut_app.exp

cd $src_root
step "Make user space config"
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Target Architecture\r\n.*(\[0-9]+). $arch .*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Target Architecture Variant.*\\\[.*]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            exit
        }
    }
}

step "Make default kernel config"
cd $kernel_root
set timeout 60
spawn cp $src_root/target/device/AnalogDevices/arch-$arch/$kernel_defconfig $kernel_root/arch/$arch/configs/
spawn make ARCH=$arch $kernel_defconfig
while 1 {
    expect {
        -re "make:.*Error" {
            send_user "\n\nERROR: make kernel default config"
            exit
        }
        "configuration written to" {}
        eof { break }
        timeout {
            send_user "\n\nERROR: make kernel default config timeout"
            exit
        }
    }
}

step "Make kernel config"
cd $kernel_root
set timeout 300
spawn make ARCH=$arch config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "USB Gadget Drivers \\\[.*]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "End of configuration"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config"
            exit
        }
    }
}

step "Generate kernel defconfig"
cd $kernel_root
set timeout 60
spawn make ARCH=$arch savedefconfig
while 1 {
    expect {
        -re "make:.*Error" {
            send_user "\n\nERROR: Generate kernel defconfig"
            exit
        }
        "savedefconfig=defconfig Kconfig" {}
        eof {
            break
        }
        timeout {
            send_user "\n\nERROR: Generate kernel defconfig timeout"
            exit
        }
    }
}

spawn cp defconfig $kernel_root/arch/$arch/configs/$kernel_defconfig

cd $kernel_root
spawn make ARCH=$arch mrproper
set timeout 1200
while 1 {
    expect {
        "CLEAN" {}
        eof { break }
    }
}


cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
