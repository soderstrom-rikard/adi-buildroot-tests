#!/usr/bin/expect
set file_name $argv0

cd $src_root

set timeout 300
spawn make config
while 1 {
    expect {

        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        -re "alsa-lib.*BR2_PACKAGE_ALSA_LIB.*\\\[.*]" {
            send "N\r"
        }

        -re "alsa-utils.*BR2_PACKAGE_ALSA_UTILS.*\\\[.*]" {
            send "N\r"
        }

        -re "ffmpeg.*BR2_PACKAGE_FFMPEG.*\\\[.*]" {
            send "N\r"
        }

        -re "libid3tag.*BR2_PACKAGE_LIBID3TAG.*\\\[.*]" {
            send "N\r"
        }

        -re "speex.*BR2_PACKAGE_SPEEX.*\\\[.*]" {
            send "N\r"
        }

        -re "libvorbis.*BR2_PACKAGE_LIBVORBIS.*\\\[.*]" {
            send "N\r"
        }

        -re "jpeg.*BR2_PACKAGE_JPEG.*\\\[.*]" {
            send "N\r"
        }

        -re "libpng.*BR2_PACKAGE_LIBPNG.*\\\[.*]" {
            send "N\r"
        }

        -re "usbutils.*BR2_PACKAGE_USBUTILS.*\\\[.*]" {
            send "N\r"
        }

        -re "libgcrypt.*BR2_PACKAGE_LIBGCRYPT.*\\\[.*]" {
            send "N\r"
        }

        -re "libgpg-error.*BR2_PACKAGE_LIBGPG_ERROR.*\\\[.*]" {
            send "N\r"
        }

        -re "libao.*BR2_PACKAGE_LIBAO.*\\\[.*]" {
            send "N\r"
        }

        -re "libmad.*BR2_PACKAGE_LIBMAD.*\\\[.*]" {
            send "N\r"
        }

        -re "libogg.*BR2_PACKAGE_LIBOGG.*\\\[.*]" {
            send "N\r"
        }

        -re "openssl.*BR2_PACKAGE_OPENSSL.*\\\[.*]" {
            send "N\r"
        }

        -re "sqlite.*BR2_PACKAGE_SQLITE.*\\\[.*]" {
            send "N\r"
        }

        -re "readline.*BR2_PACKAGE_READLINE.*\\\[.*]" {
            send "N\r"
        }

        -re "ncurses.*BR2_PACKAGE_NCURSES.*\\\[.*]" {
            send "N\r"
        }

        -re "libusb.*BR2_PACKAGE_LIBUSB.*\\\[.*]" {
            send "N\r"
        }

        -re "string test*BR2_PACKAGE_STRING_TEST.*\\\[.*]" {
            send "N\r"
        }

        -re "SDL.*BR2_PACKAGE_SDL.*\\\[.*]" {
            send "N\r"
        }

        -re "Networking support.*NET.*\\\[.*]" {
            if { $file_name == "./build_fs_xip_kernel.exp" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

        -re "Ethernet.*1000 Mbit.*NETDEV_1000.*\\\[.*]" {
            send "N\r"
        }

        -re "Ethernet.*10000 Mbit.*NETDEV_10000.*\\\[.*]" {
            send "N\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send "N\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "N\r"
        }

        -re "Distributed Switch Architecture support.*NET_DSA.*\\\[.*]" {
            send -s "N\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

        -re "Second extended fs support \\\(EXT2_FS\\\) \\\[.*]" {
            send "N\r"
        }

        -re "SCSI device support.*SCSI.*\\\[.*]" {
            send "N\r"
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            send "N\r"
        }

        -re "HID Devices.*HID_SUPPORT.*\\\[.*]" {
            send "N\r"
        }

        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "N\r"
        }

        -re "ISO 9660 CDROM file system support.*ISO9660_FS.*\\\[.*]" {
            send "N\r"
        }

        -re "UDF file system support.*UDF_FS.*\\\[.*]" {
            send "N\r"
        }

        -re "VFAT \\\(Windows-95\\\) fs support.*VFAT_FS.*\\\[.*]" {
            send "N\r"
        }

        -re "usbutils \\\(lsusb\\\).*USER_USBUTILS.*\\\[.*]" {
            send "N\r"
        }

#######################################################################################

        -re "boa.*USER_BOA_SRC_BOA.*\\\[.*]" {
            send "N\r"
        }

        -re "dhrystone.*USER_DHRYSTONE_DHRYSTONE.*\\\[.*]" {
            send "N\r"
        }

        -re "whetstone.*USER_WHETSTONE_WHETSTONE.*\\\[.*]" {
            send "N\r"
        }

        -re "VIDEO test program.*USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
            send "N\r"
        }

        -re "TWI LCD test program.*USER_BLACKFIN_TWILCDTEST.*\\\[.*]" {
            send "N\r"
        }

        -re "netperf.*USER_NETPERF_NETPERF.*\\\[.*]" {
            send -s "N\r"
        }

        -re "netserver.*USER_NETPERF_NETSERVER.*\\\[.*]" {
            send -s "N\r"
        }

        -re "strace.*USER_STRACE_STRACE.*\\\[.*]" {
            send "N\r"
        }

        -re "dhcp.*USER_DHCP.*\\\[.*]" {
            send "N\r"
        }

        -re "pngview.*USER_PNGVIEW.*\\\[.*]" {
            send "N\r"
        }

        -re "jpegview.*USER_JPEGVIEW_JPEGVIEW.*\\\[.*]" {
            send "N\r"
        }

        -re "ftp.*USER_FTP_FTP_FTP.*\\\[.*]" {
            send "N\r"
        }

        -re "telnet.*USER_TELNET_TELNET.*\\\[.*]" {
            send "N\r"
        }

        -re "e2fsck.*USER_E2FSPROGS_E2FSCK_E2FSCK.*\\\[.*]" {
            send "N\r"
        }

        -re "mke2fs.*USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
            send "N\r"
        }

        -re "mkdosfs.*USER_DOSFSTOOLS_MKDOSFS.*\\\[.*]" {
            send "N\r"
        }

        -re "dosfsck.*USER_DOSFSTOOLS_DOSFSCK.*\\\[.*]" {
            send "N\r"
        }

        -re "watchdogd.*USER_WATCHDOGD.*\\\[.*]" {
            send "N\r"
        }

        -re "zmodem utils.*USER_LRZSZ_LRZSZ.*\\\[.*]" {
            send "N\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "N\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "N\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "N\r"
        }

        -re "mixer.*USER_VPLAY_MIXER.*\\\[.*]" {
            send "N\r"
        }

        -re "gdbserver.*USER_GDB.*\\\[.*]" {
            send "N\r"
        }

        -re "mtd-utils.*USER_MTDUTILS.*\\\[.*]" {
            send "N\r"
        }

        -re "pThreads threaddemos.*USER_THREADDEMOS_THREADDEMOS.*\\\[.*]" {
            send "N\r"
        }

        -re "play.*USER_PLAY_PLAY.*\\\[.*]" {
            send "N\r"
        }

        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
            send "N\r"
        }

        -re "Input event device test.*EVENT_TEST.*\\\[.*]" {
            send "N\r"
        }

        -re "Install ELF shared libraries.*INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {
            send "N\r"
        }

        -re "Install FLAT shared libraries.*INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {
            send "N\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

##############################################################################
##############################################################################
# Since SPI is selected by sound driver which is underneath and turned on, so
# it is impossible to unselected it in the first round. Spawn another make config
# to disable it. The same situation for libpng and libjpeg.
##############################################################################

spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        -re "alsa-lib.*BR2_PACKAGE_ALSA_LIB.*\\\[.*]" {
            send "N\r"
        }

        -re "libogg.*BR2_PACKAGE_LIBOGG.*\\\[.*]" {
            send "N\r"
        }

        -re "libusb.*BR2_PACKAGE_LIBUSB.*\\\[.*]" {
            send "N\r"
        }

        -re "SDL.*BR2_PACKAGE_SDL.*\\\[.*]" {
            send "N\r"
        }

        -re "Generic input layer.*needed for keyboard, mouse.*INPUT.*\\\[.*]" {
            send "N\r"
        }

        -re "Native language support.*NLS.*\\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "SPI support.*SPI.*\\\[\[^\r]*]" {
            send "N\r"
        }

        -re "Build libpng \\\(LIB_LIBPNG\\\) \\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build libjpeg \\\(LIB_LIBJPEG\\\) \\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build libG \\\(LIB_LIBG\\\) \\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build liblzo \\\(LIB_LIBLZO\\\) \\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build libZ \\\(LIB_ZLIB\\\) \\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build ncurses.*LIB_NCURSES.*\\\[.*\[nN].*]" {
            send "N\r"
        }

        -re "Build libusb.*LIB_LIBUSB.*\\\[.*]" {
            send "N\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}
