#!/bin/bash

#################### Set up variables ####################
WORKSPACE_ROOT=/home/test/workspace
BOARD_CONFIG=BEAGLE-STD
BOARD_TYPE=beagle
ARCH_TYPE=arm
BINARY_FORMAT=flat
XENOMAI=off
THIS_LOG=$WORKSPACE_ROOT/log/$BOARD_CONFIG

if [ $# -lt 1 ] ; then
    echo "Please input [ BOARD_CONFIG BOARD_TYPE ARCH_TYPE BINARY_FORMAT XENOMAI THIS_LOG ]:"
    echo
    echo "BOARD_CONFIG :  BEAGLE-STD, etc"
    echo "BOARD_TYPE :    beagle, etc"
    echo "ARCH_TYPE :     arm, etc"
    echo "BINARY_FORMAT : flat, elf, shared-flat"
    echo "XENOMAI :       on, off"
    echo "Example: ./kernel_test $BOARD_CONFIG $BOARD_TYPE $ARCH_TYPE $BINARY_FORMAT $WORKSPACE_ROOT $THIS_LOG $XENOMAI"
    exit 1
fi

if [ -n "$1" ] ; then
    BOARD_CONFIG=$1
fi

if [ -n "$2" ] ; then
    BOARD_TYPE=$2
fi

if [ -n "$3" ] ; then
    ARCH_TYPE=$3
fi

if [ -n "$4" ] ; then
    BINARY_FORMAT=$4
fi

if [ -n "$5" ] ; then
    WORKSPACE_ROOT=$5
fi

if [ -n "$6" ] ; then
    THIS_LOG=$6
fi

if [ -n "$7" ] ; then
    XENOMAI=$7
fi

SRC_ROOT=$WORKSPACE_ROOT/$BOARD_TYPE
TESTSUITES_DIR=$SRC_ROOT/testsuites
OUTPUT_DIR=$SRC_ROOT/output
OUTPUT_BAK_DIR=$SRC_ROOT/output.bak
KERNEL_CUSTOM_DIR=$OUTPUT_DIR/build/linux-custom
IMAGE_DIR=$OUTPUT_DIR/images

echo -e "# Test environment variables:
# BOARD_CONFIG=$BOARD_CONFIG
# BOARD_TYPE=$BOARD_TYPE
# BINARY_FORMAT=$BINARY_FORMAT
# WORKSPACE_ROOT=$WORKSPACE_ROOT
# SRC_ROOT=$SRC_ROOT
# THIS_LOG=$THIS_LOG
# XENOMAI=$XENOMAI
"


#################### Check directories ####################

if [ -d $OUTPUT_DIR ] ; then
    rm -rf $OUTPUT_DIR
fi

if [ -d $OUTPUT_BAK_DIR ] ; then
  rm -rf $OUTPUT_BAK_DIR
fi

if [ ! -d $SRC_ROOT ] ; then
    exit 2
fi

if [ ! -d $THIS_LOG ] ; then
    mkdir -p $THIS_LOG
else
    rm -rf $THIS_LOG/*
fi


#################### Set up arrays for all testcase ####################

# Set RESET_BOARD to 1 if your target board could be restarted from host machine parallel port.
RESET_BOARD=1
BUILD_POLICY=1

n=100

AUTO_TESTCASE=( [0]="serial" [$((n+1))]="ltp" )

AUTO_RUN_STATUS=( [0]="0" [$((n+1))]="0" )

MANUAL_TESTCASE=( [0]="" [$((n+1))]="" )

MANUAL_RUN_STATUS=( [0]="0" [$((n+1))]="0" )


#################### Secific BOARD_CONFIG definition ####################

if [ $BOARD_CONFIG = "BEAGLE-STD" ] ; then
    BOARD_TYPE=beagle

    for i in `seq 0 $n`;
    do
        AUTO_RUN_STATUS[$i]=0
        AUTO_RUN_STATUS[$((n+i))]="0"
    done
    for i in `seq 0 $n`;
    do
        MANUAL_RUN_STATUS[$i]=0
        MANUAL_RUN_STATUS[$((n+i))]="0"
    done

    AUTO_RUN_STATUS[0]="1"; AUTO_RUN_STATUS[$((n+1))]="1";

fi


#################### List the tests to be run on the machine ####################

testcase_list=(${AUTO_TESTCASE[@]:0} ${MANUAL_TESTCASE[@]:0})
run_status_list=(${AUTO_RUN_STATUS[@]:0} ${MANUAL_RUN_STATUS[@]:0})

p1=${#AUTO_TESTCASE[*]}
q1=${#MANUAL_TESTCASE[*]}
p=${#testcase_list[*]}
q=${#run_status_list[*]}

if [ $p -eq $q ] ; then
    echo "**********************************************"
    echo "All the testcases that run on this machine:"
    echo "(Auto test and manual test.)"
    echo "*** Auto test *** "
    for i in `seq 0 $p`
    do
        if [ ! -z ${run_status_list[$i]} ] && [ ${run_status_list[$i]} == 1 ] ; then
            if [ $i -eq $p1 ]; then
                echo
                echo "*** Manual test *** "
            fi
            echo "${testcase_list[$i]}"

        fi
    done
    echo "**********************************************"
fi


#################### Preparation before test ####################

TOOLCHAIN_DIR=/opt/arm/bin
CROSS_COMPILER=$TOOLCHAIN_DIR/arm-none-linux-gnueabi-gcc
# export PATH=$PATH:/opt/arm/bin
# /opt/arm/bin/arm-none-linux-gnueabi-gcc -v
export PATH=$PATH:$TOOLCHAIN_DIR
$CROSS_COMPILER -v
echo

cp $TESTSUITES_DIR/common/reset_board $TESTSUITES_DIR/ltp


########################### Functions ###########################

# manually clean all sources
# Don't use 'make clean' in base root as it may render mistakes of 
#+ patching and unpatching problem to kernel source.
clean_src () {
    # delete build files
    if [ -d $OUTPUT_DIR ] ; then
        rm -rf $OUTPUT_DIR
    fi

    # clean kernel source
    cd $SRC_ROOT/linux/linux-2.6.x
    make ARCH=$ARCH_TYPE mrproper
    git checkout .
}

# copy image and config files after each test
copy_result () {
    if [ -n "$1" ] ; then
        post_fix=$1
    else
        post_fix=unknow
    fi

    if [ -f $IMAGE_DIR/uImage ] ; then
        cp $IMAGE_DIR/uImage $THIS_LOG/uImage.$post_fix
    fi

    cp $KERNEL_CUSTOM_DIR/.config $THIS_LOG/config.kernel.$post_fix
    cp $SRC_ROOT/.config $THIS_LOG/config.user.$post_fix
}


#################### BUILD POLICY ####################

if [ $BUILD_POLICY -eq 1  ] ; then
    echo "Running build policy"

    # always clean source before build
    clean_src

    cd $TESTSUITES_DIR/policy
    echo "./build_policy_kernel.exp $BOARD_TYPE $BINARY_FORMAT $XENOMAI >/dev/null  2>&1"
    ./build_policy_kernel.exp $BOARD_TYPE $BINARY_FORMAT $XENOMAI >/dev/null  2>&1

    copy_result policy
    mv $SRC_ROOT/linux/linux-2.6.x/defconfig $THIS_LOG/defconfig.policy
    cp $TESTSUITES_DIR/policy/build_policy_kernel_log $THIS_LOG

    if [ ! -f $IMAGE_DIR/uImage ] ; then
        echo "Kernel image fails to generate. Terminate test!"
        tail -50 ./build_policy_kernel_log
        exit 3
    fi

    # back up compiled stuff for future build
    cp $SRC_ROOT/.config $SRC_ROOT/config.user.policy
    cp -fr $OUTPUT_DIR $OUTPUT_BAK_DIR

    sleep 30

    if [ $RESET_BOARD -eq 1  ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp >/dev/null  2>&1
        sleep 10
    fi

    sleep 10

fi


#############################################################################################
########################## TEST LTP #########################################################

if [ ${AUTO_RUN_STATUS[$((n+1))]} -eq 1 ] ; then
    echo "Testing LTP..."

    ltp_args=( [0]="1" [1]="2" [2]="3" )
    ltp_suf=(slab slub slob)

    for i in 0 1 2
    do

        # always clean source before build
        clean_src

	cp -a $OUTPUT_BAK_DIR $OUTPUT_DIR
	cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config
	rm $KERNEL_CUSTOM_DIR/.stamp_compiled   # delete .stamp_compiled to trigger new build

        echo "Test ltp with option ${ltp_suf[i]}"
	cd $TESTSUITES_DIR/ltp
        echo "./build_ltp_kernel.exp $BOARD_TYPE ${ltp_args[i]}"
        ./build_ltp_kernel.exp $BOARD_TYPE ${ltp_args[i]}> /dev/null 2>&1

        copy_result ltp_${ltp_suf[i]}

        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "Build kernel failed for ltp ${ltp_suf[i]} test"
            mv $TESTSUITES_DIR/ltp/build_ltp_kernel_log $THIS_LOG/build_ltp_kernel_log_${ltp_suf[i]}
        else
            # do if build uclinux-dist succeed
            echo "build_ltp_kernel.exp done"
            sleep 30
            ./ltp_auto_test.exp $BOARD_TYPE /dev/ttyS0 2 > /dev/null 2>&1
            echo "ltp_auto_test.exp done"
            ./ltp_compare_results_all.sh config/summary.base $TESTSUITES_DIR/ltp/test/logs/summary.new >> ltp_test_log
            if [ $? == 1 ] ; then
                echo "ltp test fail"
                echo "LTP Test ............[FAIL]" >> ltp_test_log
            else
                echo "ltp test pass"
                echo "LTP Test ............[PASS]" >> ltp_test_log
            fi

            mv $TESTSUITES_DIR/ltp/build_ltp_kernel_log $THIS_LOG/build_ltp_kernel_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/test/logs/summary.new $THIS_LOG/ltp-summary_test_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/test/logs/detailed.new $THIS_LOG/ltp-detailed_test_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/build_ltp_log $THIS_LOG/build_ltp_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/ltp_test_log $THIS_LOG/ltp_test_log_${ltp_suf[i]}

            sleep 30

            if [ $RESET_BOARD -eq 1  ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp >/dev/null 2>&1
                sleep 10
            fi
            # end, do if build uclinux-dist succeed
        fi

    done

fi

echo "Testing Done."
exit 0
