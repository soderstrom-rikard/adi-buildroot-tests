#!/usr/bin/expect
#
# This file can't be indepently executed.
# It needs to be included into build***kernel.exp scripts.
#
# Usage:
# source_args config_audio.exp audio_dev module
#
# Examples:
# * config adau1761 driver as module:
#   source_args config_audio.exp audio_adau1761 module
#
# * config adau1761 driver as built-in mode:
#   source_args config_audio.exp audio_adau1761
#

if { $argc < 1} {
    send_user "\nconfig_audio.exp\nPlease input: audio_dev, module(module or null)\n"
    send_user "Refer to build_audio_kernel.exp for audio_dev\n"
    exit
}

set audio_dev [lindex $argv 0]
set module [lindex $argv 1]

if { [info exists module] && $module == "module" } {
    set module_flag "M"
} else {
    set module_flag "Y"
}

cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

#some flash in MTD conflict with adau1761 on bf609-ezkit
        -re "Memory Technology Device \\\(MTD\\\) support \\\(MTD\\\).*\\\[.*]" {
            if { [string match "BF6*" $board_type] } {
                send "N\r"
            } else {
                send "\r"
            }
        }

#some sound card need blackfin I2C/SPI driver
        -re "I2C support \\\(I2C\\\).*\\\[.*]" {
            if { $audio_dev == "audio_ad1939" } {
                send "M\r"
            } else {
                send "Y\r"
            }
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            if { $audio_dev == "audio_ssm2603" || $audio_dev == "audio_ad73311" || $audio_dev == "audio_ad1937" || [string match "audio_adau*" $audio_dev] } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "SPI support \\\(SPI\\\).*\\\[.*]" {
            if { $audio_dev == "audio_ad1938" || $audio_dev == "audio_ad1939" } {
                send "Y\r"
            } elseif { $audio_dev == "audio_ad1937" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

        -re "SPI controller driver for ADI Blackfin.xx.*SPI_BFIN.XX.*\\\[.*]" {
            send "Y\r"
        }

        -re "SHARP LQ035Q1DH02 TFT LCD.*FB_BFIN_LQ035Q1.*\\\[.*]" {
            if { $audio_dev == "audio_ssm2603" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

#sound card
        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "Y\r"
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS PCM.*digital audio.*API.*SND_PCM_OSS\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "Y\r"
        }

        -re "SoC I2S Audio for the ADI Blackfin chip.*SND_BF.XX_I2S.*\\\[.*]" {
            if { $audio_dev == "audio_ssm2603" || $audio_dev == "audio_ad73311" || [string match "audio_adau*" $audio_dev] } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC SSM2602 Audio Codec Add-On Card support.*SND_BF.XX_SOC_SSM2602.*\\\[.*]" {
            if { $audio_dev == "audio_ssm2603" } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "EVAL-ADAU1373 board on Blackfin.*SND_SOC_BFIN_EVAL_ADAU1373.*\\\[.*]" {
            if { $audio_dev == "audio_adau1373" } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "EVAL-ADAU1X61 board on Blackfin.*SND_SOC_BFIN_EVAL_ADAU1X61.*\\\[.*]" {
            if { [string match "audio_adau1*61" $audio_dev] } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC AD73311.*Audio support for Blackfin.*SND_BF.XX_SOC_AD73311.*\\\[.*]" {
            if { $audio_dev == "audio_ad73311" } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC I2S.*TDM mode.*Audio for the ADI BF.xx chip.*SND_BF.XX_TDM.*\\\[.*]" {
            if { $audio_dev == "audio_ad1836" || [string match "audio_ad193*" $audio_dev] } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC AD1836 STAMP Daughter card support.*SND_BF.XX_SOC_AD1836.*\\\[.*]" {
            if { $audio_dev == "audio_ad1836" } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC AD193X Audio support for Blackfin.*SND_BF.XX_SOC_AD193X.*\\\[.*]" {
            if { [string match "audio_ad193*" $audio_dev] } {
                send "$module_flag\r"
            } else {
                send "N\r"
            }
        }

        -re "Set a SPORT for Sound chip.*SND_BF.XX_SPORT_NUM.*\\\[.*]" {
            if { [string match "BF527-EZKIT*" $board_type] } {
                send "1\r"
            } else {
                send "0\r"
            }
        }

        -re "Uncached DMA region.*(\[0-9]). Enable 2M DMA region.*DMA_UNCACHED_2M.*\[cC]hoice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}
