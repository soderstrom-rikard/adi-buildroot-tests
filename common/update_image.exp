#!/usr/bin/expect

# This file couldn't be indepently executed.
# It is meant to be included into ***_test.exp scripts.

set uboot_flag 0
set timeout 8
send "\r"
while 1 {
    expect {
        -re "\[lL]ogin:" {
            sleep .5
            send "$login_user\r"
            continue
        }
        -re "\[Pp]assword:" {
            sleep .5
            send "$password\r"
            expect -re $kernel_prompt
            break
        }
        -re $kernel_prompt {
            break
        }
        -re $uboot_prompt {
            set uboot_flag 1
            break
        }
        timeout {
            send_user "Fail: no kernel response" 
            exit
        }
    }
}

if { $uboot_flag == 1 } {
    before_boot

    set timeout 180
    send "run mmcboot\r"
    while 1 {
        expect {
            -re "login:" {
                send "root\r"
                expect -re $kernel_prompt
                break
            }
            timeout {
                send_user "Fail: boot kernel" 
                exit
            }
        }
    }
}
 
set timeout 5
send "\r"
while 1 {
    expect {
        -re $kernel_prompt {
            break
        }
        timeout {
            send_user "Fail: kernel is not started properly" 
            exit
        }
    }
}
 
set timeout 10
send "ifconfig $eth_dev $targetip\r"
while 1 {
    expect {
        -re "ifconfig:" {
            send_user "Fail to enable ethernet\n"
            exit
        }
        -re "$eth_dev: link up|$kernel_prompt" {
            sleep 2
            break
        }
        timeout {
            send_user "Fail to enable ethernet\n"
            exit
        }
    }
}

set timeout 10
send "dmesg|grep mmcblk0\r"
while 1 {
    expect {
        -re "mmcblk0: p1.*$kernel_prompt" {
            break
        }
        timeout {
            send_user "Fail to find mmc info in dmesg, but we still may proceed\n"
            break
        }
    }
}

set timeout 20
send "mount /dev/mmcblk0p1 /mnt/; sleep 2; ls /mnt\r"
while 1 {
    expect {
        -re "u-boot.*$kernel_prompt" {
            break
        }

        timeout {
            send_user "Fail to mount memory card\n"
            exit
        }
    }
}

sleep 3
send_user "Run command on host: rcp /tftpboot/uImage root@$targetip:/mnt\n"
if [ catch {exec rcp /tftpboot/uImage root@$targetip:/mnt} ] {
    send_user "Fail to rcp uImage to memory card\n"
    send_user "$errorInfo\n"
    exit
}

set timeout 20
send "umount /mnt\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            send_user "Fail to umount memory card\n"
	    exit
        }
        -re $kernel_prompt {
            break
        }
        timeout {
            send_user "umount timeout\n"
	    exit
        }
    }
}

set timeout 50
send "reboot\r"
while 1 {
    expect {
        "Hit any key" {
            send "\r"
            break
        }
        " 2 " {
            send "\r"
            break
        }
        timeout {
            send "\r"
            send_user "Fail: get into uboot\n"
            break
        }
    }
}

set timeout 5
expect -re ">|#"
send "\r"
expect -re ">|#"

before_boot

set timeout 180
send "run mmcboot\r"
while 1 {
    expect {
        -re "login:" {
            set timeout 15
            send "root\r"
            expect -re $kernel_prompt
            send_log "successful boot attempt"
            break
        }

        -re "Linux version (\[^\(\)]+) \\\(" {
            set linux_version $expect_out(1,string)
        }

        -re "gcc version (.*\\\(.*\\\)) \\\)" {
            set gcc_version $expect_out(1,string)
        }

        -re "(Trace:.*\r\n\r\n)|(Kernel panic)" {
            expect -re $kernel_prompt
            send_user "\nKernel booting up with dump info or panic\n"
            send_log "\n$TITLE ............\[FAIL\]\n"
            send_log "Test Period is: [ test_period ] seconds.\n"
            exit
        }

        timeout {
            send_user "Reboot the linux kernel timeout!\n"
            break
        }
    }
}

set timeout 10
send "ifconfig $eth_dev $targetip\r"
while 1 {
    expect {
        -re "$eth_dev: link up" {
            sleep 2
            break
        }

        timeout {
            send_user "Fail to enable ethernet\n"
            break
        }
    }
}

set timeout 10
send "cat /proc/version\r"
while 1 {
    expect {
        -re $kernel_prompt {
            sleep 2
            break
        }

        timeout {
            send_user "Fail to read version info\n"
            break
        }
    }
}

send_user "\nLinux version: $linux_version\n"
send_user "GCC version: $gcc_version\n"
