#!/usr/bin/expect

# This file couldn't be indepently executed.
# It is meant to be included into ***_test.exp scripts.

set timeout 8
send "\r"
while 1 {
    expect {
        -re "\[Pp]assword:" {
            sleep .5
            send "$password\r"
            expect -re $kernel_prompt
            break
        }
        -re $kernel_prompt {
            break
        }
        timeout {
            send_user "Fail: no kernel response" 
            exit
        }
    }
}
 
set timeout 5
send "\r"
while 1 {
    expect {
        -re $kernel_prompt {
            break
        }
        timeout {
            send_user "Fail: kernel is not started properly" 
            exit
        }
    }
}
 
set timeout 10
send "ifconfig $eth_dev $targetip\r"
while 1 {
    expect {
        -re "$eth_dev: link up" {
            sleep 2
            break
        }

        timeout {
            send_user "Fail to enable ethernet\n"
            exit
        }
    }
}

set timeout 10
send "dmesg|grep mmcblk0\r"
while 1 {
    expect {
        -re "mmcblk0: p1.*$kernel_prompt" {
            break
        }

        timeout {
            send_user "Fail to find memory card\n"
            exit
        }
    }
}

set timeout 10
send "mount /dev/mmcblk0p1 /mnt/; sleep 2; ls /mnt\r"
while 1 {
    expect {
        -re "u-boot.*$kernel_prompt" {
            break
        }

        timeout {
            send_user "Fail to mount memory card\n"
            exit
        }
    }
}

if [ catch {exec rcp /tftpboot/uImage root@$targetip:/mnt} ] {
    send_user "Fail to rcp uImage to memory card\n"
    send_user "$errorInfo\n"
    exit
}

set timeout 180
send "reboot\r"
while 1 {
    expect {
        -re "login:" {
            set timeout 15
            send "root\r"
            expect -re $kernel_prompt
            send_log "successful boot attempt"
            break
        }

        -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
        }

        -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
        }

        -re "(Trace:.*\r\n\r\n)|(Kernel panic)" {
            expect -re $kernel_prompt
            send_user "\nKernel booting up with dump info or panic\n"
            send_log "\n$TITLE ............\[FAIL\]\n"
            exit
        }

        timeout {
            send_user "Reboot the linux kernel timeout!\n"
            break
        }
    }
}

set timeout 10
send "ifconfig $eth_dev $targetip\r"
while 1 {
    expect {
        -re "$eth_dev: link up" {
            sleep 2
            break
        }

        timeout {
            send_user "Fail to enable ethernet\n"
            break
        }
    }
}
