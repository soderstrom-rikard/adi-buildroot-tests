#!/bin/bash

#################### Set up variables ####################
WORKSPACE_ROOT=/home/test/workspace
BOARD_CONFIG=BEAGLE-STD
BOARD_TYPE=BEAGLE
ARCH_TYPE=arm
BINARY_FORMAT=flat
XENOMAI=off
THIS_LOG=$WORKSPACE_ROOT/log/$BOARD_CONFIG

if [ $# -lt 1 ] ; then
    echo "Please input [ BOARD_CONFIG BOARD_TYPE ARCH_TYPE BINARY_FORMAT XENOMAI THIS_LOG ]:"
    echo
    echo "BOARD_CONFIG :  BEAGLE-STD, PANDA-STD etc"
    echo "BOARD_TYPE :    BEAGLE, PANDA, etc"
    echo "ARCH_TYPE :     arm, blackfin, etc"
    echo "BINARY_FORMAT : flat, elf, shared-flat"
    echo "XENOMAI :       on, off"
    echo "Example: ./kernel_test $BOARD_CONFIG $BOARD_TYPE $ARCH_TYPE $BINARY_FORMAT $WORKSPACE_ROOT $THIS_LOG $XENOMAI"
    exit 1
fi

if [ -n "$1" ] ; then
    BOARD_CONFIG=$1
fi

if [ -n "$2" ] ; then
    BOARD_TYPE=$2
fi

if [ -n "$3" ] ; then
    ARCH_TYPE=$3
fi

if [ -n "$4" ] ; then
    BINARY_FORMAT=$4
fi

if [ -n "$5" ] ; then
    WORKSPACE_ROOT=$5
fi

if [ -n "$6" ] ; then
    THIS_LOG=$6
fi

if [ -n "$7" ] ; then
    XENOMAI=$7
fi

if [ $NODE_NAME ] ; then
    SRC_ROOT=$WORKSPACE_ROOT/src/kernel/label/$NODE_NAME
else
    SRC_ROOT=$WORKSPACE_ROOT/src/kernel/label/$BOARD_CONFIG
fi
TESTSUITES_DIR=$SRC_ROOT/testsuites
OUTPUT_DIR=$SRC_ROOT/output
OUTPUT_BAK_DIR=$SRC_ROOT/output.bak
KERNEL_CUSTOM_DIR=$OUTPUT_DIR/build/linux-custom
IMAGE_DIR=$OUTPUT_DIR/images

echo -e "# Test environment variables:
# BOARD_CONFIG=$BOARD_CONFIG
# BOARD_TYPE=$BOARD_TYPE
# BINARY_FORMAT=$BINARY_FORMAT
# WORKSPACE_ROOT=$WORKSPACE_ROOT
# SRC_ROOT=$SRC_ROOT
# THIS_LOG=$THIS_LOG
# XENOMAI=$XENOMAI
"

cat <<EOF
************ Tested user-dist svn info **************
`cd $SRC_ROOT; echo -n "User-dist "; git log -1`
************ Tested linux kernel git info ***********
`cd $SRC_ROOT/linux/linux-kernel; echo -n "Kernel "; git log -1`
************ Testsuites git info ********************
`cd $TESTSUITES_DIR; echo -n "Testsuites "; git log -1`
*****************************************************
EOF

#################### Check directories ####################

if [ -d $OUTPUT_DIR ] ; then
    rm -rf $OUTPUT_DIR
fi

if [ -d $OUTPUT_BAK_DIR ] ; then
  rm -rf $OUTPUT_BAK_DIR
fi

if [ ! -d $SRC_ROOT ] ; then
    exit 2
fi

if [ ! -d $THIS_LOG ] ; then
    mkdir -p $THIS_LOG
else
    rm -rf $THIS_LOG/*
fi


#################### Set up arrays for all testcase ####################

# Set RESET_BOARD to 1 if your target board could be restarted from host machine parallel port.
RESET_BOARD=1
BUILD_POLICY=1

n=100

AUTO_TESTCASE=( [0]="ethernet" [1]="bfindma" [2]="sd" [3]="usb_storage" [4]="audio" [5]="qt" [6]="lmbench" [7]="nbench" [8]="dhrystone" [9]="whetstone" [10]="edn" [11]="dmacopy" [12]="earlyprintk" [13]="l1_module" [14]="l1_app" [15]="erestart" [16]="pthread" [17]="traps" [18]="module" [19]="boot_addr" [20]="strace" [21]="ramfs" [22]="stress" [23]="kgdb" [24]="sdiommc" [25]="null_point" [26]="watchdog" [27]="malloc_perf" [28]="fixed_code" [29]="l2_app" [30]="l2_module" [31]="sqlite" [32]="g729" [33]="mem_fragment" [34]="bfincrc" [35]="ethernet_in_buffer" [36]="reserve_mem" [37]="mmap" [38]="gptimer" [39]="nfs" [40]="smbfs" [41]="shared_flat"  [42]="string" [43]="usb_camera" [44]="audio_adau1761" [45]="pound" [46]="dll" [47]="linphone_adau1761" [48]="linkport" [49]="bluetooth" [50]="pnormtd" [51]="jffs2" [52]="jffs2_fs" [53]="camera" [54]="canbus" [55]="ptp"  [56]="change_cpufreq" [57]="reprogram_clock" [58]="crypto_bfincrc" [59]="icc" [60]="mcapi" [61]="sram_alloc" [62]="power_ethernet" [63]="power_sdiommc" [64]="kgdb_uart" [65]="power_usbhost" [66]="power_audio" [67]="zflat" [68]="audio_ssm2603" [69]="power_usbdev" [70]="sigqueue" [71]="scratchpad_app_stack" [$((n+1))]="serial" [$((n+2))]="ltp" [$((n+3))]="ethernet_usb" [$((n+4))]="timer" [$((n+5))]="usbdev" [$((n+6))]="snormtd" [$((n+7))]="usbhost" [$((n+8))]="usbotg"  [$((n+9))]="serial_uart" [$((n+10))]="snormtd_ext" [$((n+11))]="xip" [$((n+12))]="oprofile" )

AUTO_RUN_STATUS=( [0]="1" [1]="0" [2]="0" [3]="0" [4]="0" [5]="0" [6]="1" [7]="1" [8]="1" [9]="1" [10]="1" [11]="0" [12]="0"  [13]="1" [14]="1" [15]="1" [16]="1" [17]="1" [18]="1" [19]="1" [20]="1" [21]="1" [22]="1" [23]="1" [24]="0" [25]="1" [26]="1" [27]="1" [28]="1" [29]="0" [30]="0" [31]="1" [32]="1" [33]="1" [34]="0" [35]="1" [36]="1" [37]="1" [38]="0" [39]="1" [40]="1" [41]="1" [42]="1" [43]="0" [44]="0" [45]="0" [46]="1" [47]="0" [48]="0" [49]="0" [50]="0" [51]="0" [52]="0" [53]="0" [54]="0" [55]="0" [56]="1" [57]="1" [58]="0" [59]="0" [60]="0" [61]="1" [62]="0" [63]="0" [64]="0" [65]="0" [66]="0" [67]="1" [68]="0" [69]="0" [70]="1" [71]="1" [$((n+1))]="1" [$((n+2))]="1" [$((n+3))]="0" [$((n+4))]="0" [$((n+5))]="0" [$((n+6))]="0" [$((n+7))]="0" [$((n+8))]="0" [$((n+9))]="0" [$((n+10))]="0" [$((n+11))]="0" [$((n+12))]="1" )

MANUAL_TESTCASE=( [0]="bluetooth" [1]="hdmi" [2]="sdio_wifi" [3]="touchscreen" [4]="irda" [5]="generic_gpio" [6]="pfbutton" [7]="video_decoder" [8]="video_encoder" [$((n+1))]="" )

MANUAL_RUN_STATUS=( [0]="0" [1]="0" [2]="0" [3]="1" [4]="1" [5]="1" [6]="1" [7]="0" [8]="0" [$((n+1))]="0" )


#################### Secific BOARD_CONFIG definition ####################

if [ $BOARD_CONFIG = "BEAGLE-STD" ] ; then
    BOARD_TYPE=BEAGLE

    AUTO_RUN_STATUS[2]="1"; AUTO_RUN_STATUS[3]="1"; AUTO_RUN_STATUS[4]="1"; AUTO_RUN_STATUS[5]="1"; AUTO_RUN_STATUS[36]="0"; AUTO_RUN_STATUS[$((n+3))]="1";
    MANUAL_RUN_STATUS[0]="1"; MANUAL_RUN_STATUS[1]="1";
fi

if [ $BOARD_CONFIG = "PANDA-STD" ] ; then
    BOARD_TYPE=PANDA

    AUTO_RUN_STATUS[2]="1"; AUTO_RUN_STATUS[3]="1"; AUTO_RUN_STATUS[4]="0"; AUTO_RUN_STATUS[5]="0"; AUTO_RUN_STATUS[36]="0";
    MANUAL_RUN_STATUS[0]="1"; MANUAL_RUN_STATUS[1]="1"; MANUAL_RUN_STATUS[2]="1";
fi

if [ $BOARD_CONFIG = "BF537-STAMP-STD" ] ; then
    BOARD_TYPE=BF537-STAMP

    AUTO_RUN_STATUS[1]="1"; AUTO_RUN_STATUS[11]="1"; AUTO_RUN_STATUS[12]="1";
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-STD" ] ; then
    BOARD_TYPE=BF609-EZKIT

    AUTO_RUN_STATUS[1]="1"; AUTO_RUN_STATUS[11]="1"; AUTO_RUN_STATUS[12]="1"; AUTO_RUN_STATUS[21]="0"; AUTO_RUN_STATUS[24]="1"; AUTO_RUN_STATUS[29]="1"; AUTO_RUN_STATUS[30]="1"; AUTO_RUN_STATUS[34]="1"; AUTO_RUN_STATUS[39]="1"; AUTO_RUN_STATUS[45]="1"; AUTO_RUN_STATUS[58]="1"; AUTO_RUN_STATUS[59]="1"; AUTO_RUN_STATUS[60]="1"; AUTO_RUN_STATUS[64]="1"; AUTO_RUN_STATUS[66]="1";
    AUTO_RUN_STATUS[$((n+4))]="1"; AUTO_RUN_STATUS[$((n+6))]="1"; AUTO_RUN_STATUS[$((n+8))]="1"; AUTO_RUN_STATUS[$((n+9))]="1";AUTO_RUN_STATUS[$((n+10))]="1";AUTO_RUN_STATUS[$((n+11))]="1";
    MANUAL_RUN_STATUS[0]="1"; MANUAL_RUN_STATUS[7]="1"; MANUAL_RUN_STATUS[8]="1";
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-SSM2603" ] ; then
    BOARD_TYPE=BF609-EZKIT

    for i in `seq 0 $n`;
    do
        AUTO_RUN_STATUS[$i]=0
        AUTO_RUN_STATUS[$((n+i))]="0"
    done
    AUTO_RUN_STATUS[38]="1"; AUTO_RUN_STATUS[50]="1"; AUTO_RUN_STATUS[51]="1"; AUTO_RUN_STATUS[52]="1"; AUTO_RUN_STATUS[53]="1"; AUTO_RUN_STATUS[62]="1"; AUTO_RUN_STATUS[63]="1"; AUTO_RUN_STATUS[64]="1"; AUTO_RUN_STATUS[68]="1"; 
    AUTO_RUN_STATUS[$((n+1))]="1"; AUTO_RUN_STATUS[$((n+2))]="1"; AUTO_RUN_STATUS[$((n+4))]="1"; AUTO_RUN_STATUS[$((n+6))]="1"; AUTO_RUN_STATUS[$((n+9))]="1";AUTO_RUN_STATUS[$((n+10))]="1";AUTO_RUN_STATUS[$((n+11))]="1"; AUTO_RUN_STATUS[$((n+12))]="1";

    for i in `seq 0 $n`;
    do
        MANUAL_RUN_STATUS[$i]=0
        MANUAL_RUN_STATUS[$((n+i))]="0"
    done
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-USBDEV" ] ; then
    BOARD_TYPE=BF609-EZKIT

    for i in `seq 0 $n`;
    do
        AUTO_RUN_STATUS[$i]=0
        AUTO_RUN_STATUS[$((n+i))]="0"
    done
    for i in `seq 0 $n`;
    do
        MANUAL_RUN_STATUS[$i]=0
        MANUAL_RUN_STATUS[$((n+i))]="0"
    done

    AUTO_RUN_STATUS[69]="1"; AUTO_RUN_STATUS[$((n+5))]="1"; AUTO_RUN_STATUS[$((n+8))]="1";
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-USBHOST" ] ; then
    BOARD_TYPE=BF609-EZKIT

    AUTO_RUN_STATUS[1]="1"; AUTO_RUN_STATUS[11]="1"; AUTO_RUN_STATUS[12]="1"; AUTO_RUN_STATUS[24]="1"; AUTO_RUN_STATUS[29]="1"; AUTO_RUN_STATUS[30]="1"; AUTO_RUN_STATUS[34]="1"; AUTO_RUN_STATUS[39]="1"; AUTO_RUN_STATUS[43]="1"; AUTO_RUN_STATUS[44]="1"; AUTO_RUN_STATUS[47]="1"; AUTO_RUN_STATUS[48]="1"; AUTO_RUN_STATUS[49]="1"; AUTO_RUN_STATUS[58]="1"; AUTO_RUN_STATUS[62]="1"; AUTO_RUN_STATUS[63]="1"; AUTO_RUN_STATUS[65]="1"; AUTO_RUN_STATUS[66]="1";
    AUTO_RUN_STATUS[$((n+7))]="1"; AUTO_RUN_STATUS[$((n+8))]="1"
    MANUAL_RUN_STATUS[7]="1"; MANUAL_RUN_STATUS[8]="1";
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-CAN" ] ; then
    BOARD_TYPE=BF609-EZKIT

    AUTO_RUN_STATUS[1]="1"; AUTO_RUN_STATUS[11]="1"; AUTO_RUN_STATUS[12]="1"; AUTO_RUN_STATUS[29]="1"; AUTO_RUN_STATUS[30]="1"; AUTO_RUN_STATUS[34]="1"; AUTO_RUN_STATUS[39]="1"; AUTO_RUN_STATUS[50]="1"; AUTO_RUN_STATUS[51]="0"; AUTO_RUN_STATUS[52]="0"; AUTO_RUN_STATUS[54]="1";AUTO_RUN_STATUS[55]="1"; AUTO_RUN_STATUS[59]="1";AUTO_RUN_STATUS[60]="1";
    AUTO_RUN_STATUS[$((n+4))]="1";AUTO_RUN_STATUS[$((n+6))]="1"
fi

if [ $BOARD_CONFIG = "BF609-EZKIT-FLAT" ] ; then
    BOARD_TYPE=BF609-EZKIT

    AUTO_RUN_STATUS[1]="1"; AUTO_RUN_STATUS[11]="1"; AUTO_RUN_STATUS[12]="1"; AUTO_RUN_STATUS[24]="1"; AUTO_RUN_STATUS[29]="1"; AUTO_RUN_STATUS[30]="1"; AUTO_RUN_STATUS[34]="1"; AUTO_RUN_STATUS[39]="1"; AUTO_RUN_STATUS[45]="0"; AUTO_RUN_STATUS[50]="1"; AUTO_RUN_STATUS[51]="1"; AUTO_RUN_STATUS[52]="1"; AUTO_RUN_STATUS[58]="1";
    AUTO_RUN_STATUS[$((n+4))]="1"; AUTO_RUN_STATUS[$((n+6))]="1"; AUTO_RUN_STATUS[$((n+11))]="1";
fi

#################### List the tests to be run on the machine ####################

testcase_list=(${AUTO_TESTCASE[@]:0} ${MANUAL_TESTCASE[@]:0})
run_status_list=(${AUTO_RUN_STATUS[@]:0} ${MANUAL_RUN_STATUS[@]:0})

p1=${#AUTO_TESTCASE[*]}
q1=${#MANUAL_TESTCASE[*]}
p=${#testcase_list[*]}
q=${#run_status_list[*]}

if [ $p -eq $q ] ; then
    echo "**********************************************"
    echo "All the testcases that run on this machine:"
    echo "(Auto test and manual test.)"
    echo "*** Auto test *** "
    for i in `seq 0 $p`
    do
        if [ ! -z ${run_status_list[$i]} ] && [ ${run_status_list[$i]} == 1 ] ; then
            if [ $i -eq $p1 ]; then
                echo
                echo "*** Manual test *** "
            fi
            echo "${testcase_list[$i]}"

        fi
    done
    echo "**********************************************"
fi


#################### Preparation before test ####################

if [ $ARCH_TYPE == "arm" ] ; then
    TOOLCHAIN_DIR=/opt/arm/bin
    CROSS_COMPILER=$TOOLCHAIN_DIR/arm-none-linux-gnueabi-gcc
elif [ $ARCH_TYPE == "blackfin" ] ; then
    TOOLCHAIN_DIR=/opt/uClinux/bfin-uclinux/bin:/opt/uClinux/bfin-elf/bin:/opt/uClinux/bfin-linux-uclibc/bin
    CROSS_COMPILER=/opt/uClinux/bfin-uclinux/bin/bfin-uclinux-gcc
fi
export PATH=$PATH:$TOOLCHAIN_DIR
$CROSS_COMPILER -v
echo


########################### Functions ###########################

use_output_bak () {
    if [ -d $OUTPUT_DIR ] ; then
        rm -rf $OUTPUT_DIR
    fi

    cp -a $OUTPUT_BAK_DIR $OUTPUT_DIR

    # make sure staff in output won't be patched again
    for sign in .*downloaded .*extracted .*unpacked .*patched .*configured
    do
	for FILE in `find $OUTPUT_DIR -name $sign`
	do
		touch $FILE
  		#echo "touch $FILE"
	done
    done

}

make_clean () {
    cd $SRC_ROOT
    make clean
}

# copy image and config files after each test
copy_image_config () {
    if [ -n "$1" ] ; then
        post_fix=$1
    else
        post_fix=unknow
    fi

    if [ -f $IMAGE_DIR/uImage ] ; then
        cp $IMAGE_DIR/uImage $THIS_LOG/uImage.$post_fix
    fi

    cp $KERNEL_CUSTOM_DIR/.config $THIS_LOG/config.kernel.$post_fix
    cp $SRC_ROOT/.config $THIS_LOG/config.user.$post_fix
}

# Delete some internel packages to make sure it's latest version to be downloaded.
rm $SRC_ROOT/dl/*HEAD*

#################### BUILD POLICY ####################

if [ $BUILD_POLICY -eq 1  ] ; then
    echo "Running build policy"

    cd $TESTSUITES_DIR/policy
    echo "./build_policy_kernel.exp $BOARD_TYPE $BINARY_FORMAT $XENOMAI >/dev/null  2>&1"
    ./build_policy_kernel.exp $BOARD_TYPE $BINARY_FORMAT $XENOMAI >/dev/null  2>&1

    copy_image_config "policy"
    mv $TESTSUITES_DIR/policy/build_policy_kernel_log $THIS_LOG

    if [ ! -f $IMAGE_DIR/uImage ] ; then
        echo "Kernel image fails to generate. Terminate test!"
        tail -50 ./build_policy_kernel_log
        make_clean
        exit 3
    fi

    cp $SRC_ROOT/.config $SRC_ROOT/config.user.policy

    # back up compiled stuff for future build
    cd $KERNEL_CUSTOM_DIR
    make clean > /dev/null 2>&1
    rm -fr $IMAGE_DIR/uImage
    cp -fr $OUTPUT_DIR $OUTPUT_BAK_DIR

    sleep 30

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

    sleep 10

fi


################################# AUTOMATED TESTING #################################
for i in `seq 0 $n`
do

    if [ -z ${AUTO_TESTCASE[$i]} ] ; then
        continue
    fi

    if [ ${AUTO_RUN_STATUS[$i]} -eq 1  ] ; then

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        echo  "Start testing ${AUTO_TESTCASE[$i]}..."

        if [ ${AUTO_TESTCASE[$i]} == "ethernet_in_buffer" ] ; then
            TESTCASE_DIR=ethernet
        elif [ `echo ${AUTO_TESTCASE[$i]}|grep linphone` ] ; then
            TESTCASE_DIR=linphone
        elif [ `echo ${AUTO_TESTCASE[$i]}|grep audio_` ] ; then
            TESTCASE_DIR=audio
        elif [ ${AUTO_TESTCASE[$i]} == "jffs2_fs" ] ; then
            TESTCASE_DIR=jffs2
        elif [ ${AUTO_TESTCASE[$i]} == "kgdb_uart" ] ; then
            TESTCASE_DIR=kgdb
        else
            TESTCASE_DIR=${AUTO_TESTCASE[$i]}
        fi
        cd $TESTSUITES_DIR/$TESTCASE_DIR

        if [ ${AUTO_TESTCASE[$i]} == "ethernet_in_buffer" ] ; then
            ./build_ethernet_kernel.exp $BOARD_TYPE in_buffer >/dev/null 2>&1
        elif [ ${AUTO_TESTCASE[$i]} == "linphone_adau1761" ] ; then
            ./build_linphone_kernel.exp $BOARD_TYPE audio_adau1761 >/dev/null 2>&1
        elif [ `echo ${AUTO_TESTCASE[$i]}|grep audio_` ] ; then
            ./build_audio_kernel.exp $BOARD_TYPE ${AUTO_TESTCASE[$i]} >/dev/null 2>&1
        elif [ ${AUTO_TESTCASE[$i]} == "power_audio" ] ; then
            if [ ${AUTO_RUN_STATUS[44]} -eq 1  ] ; then
                audio_dev="audio_adau1761"
            elif [ ${AUTO_RUN_STATUS[68]} -eq 1  ] ; then
                audio_dev="audio_ssm2603"
            fi
            ./build_power_audio_kernel.exp $BOARD_TYPE $audio_dev > /dev/null 2>&1
        elif [ ${AUTO_TESTCASE[$i]} == "kgdb_uart" ] ; then
            ./build_kgdb_kernel.exp $BOARD_TYPE uart >/dev/null 2>&1
        else
            ./build_${AUTO_TESTCASE[$i]}_kernel.exp $BOARD_TYPE >/dev/null 2>&1
        fi


        # Start testing after build kernel successfully
        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "$0:   Error, failed."
            tail -50 ./build_${AUTO_TESTCASE[$i]}*_kernel_log
        else
            if [ $RESET_BOARD -eq 1 ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                sleep 10
            fi

            cd $TESTSUITES_DIR/$TESTCASE_DIR

            if [ ${AUTO_TESTCASE[$i]} == "jffs2" ] || [ ${AUTO_TESTCASE[$i]} == "jffs2_fs" ] ; then
                ./flash_images.exp  $BOARD_TYPE  >/dev/null  2>&1
                sleep 10
            fi

            if [ ${AUTO_TESTCASE[$i]} == "ethernet_in_buffer" ] ; then
                ./ethernet_test.exp $BOARD_TYPE in_buffer >/dev/null 2>&1
            elif [ ${AUTO_TESTCASE[$i]} == "linphone_adau1761" ] ; then
                ./linphone_test.exp $BOARD_TYPE audio_adau1761 >/dev/null 2>&1
            elif [ `echo ${AUTO_TESTCASE[$i]}|grep audio_` ] ; then
                ./audio_test.exp $BOARD_TYPE ${AUTO_TESTCASE[$i]} >/dev/null 2>&1
                if [ $RESET_BOARD -eq 1 ] ; then
                    cd $TESTSUITES_DIR/common
                    ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                    sleep 10
                fi

                cd $TESTSUITES_DIR/$TESTCASE_DIR
                ./audio_data_test.exp $BOARD_TYPE ${AUTO_TESTCASE[$i]} >/dev/null 2>&1
                ./snd2fftw_test.exp $BOARD_TYPE ${AUTO_TESTCASE[$i]} >/dev/null 2>&1
            elif [ `echo ${AUTO_TESTCASE[$i]}|grep power` ] ; then
                if [ ${AUTO_TESTCASE[$i]} == "power_audio" ] ; then
                    ./power_audio_test.exp $BOARD_TYPE $audio_dev standby > /dev/null 2>&1
                else
                    ./${AUTO_TESTCASE[$i]}_test.exp $BOARD_TYPE standby >/dev/null 2>&1
                fi

                if [ $RESET_BOARD -eq 1 ] ; then
                    cd $TESTSUITES_DIR/common
                    ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                    sleep 10
                fi

                cd $TESTSUITES_DIR/$TESTCASE_DIR
                if [ ${AUTO_TESTCASE[$i]} == "power_audio" ] ; then
                    ./power_audio_test.exp $BOARD_TYPE $audio_dev mem > /dev/null 2>&1
                else
                    ./${AUTO_TESTCASE[$i]}_test.exp $BOARD_TYPE mem >/dev/null 2>&1
                fi
            elif [ ${AUTO_TESTCASE[$i]} == "kgdb_uart" ] ; then
                ./kgdb_test.exp $BOARD_TYPE uart >/dev/null 2>&1
            else
                ./${AUTO_TESTCASE[$i]}_test.exp $BOARD_TYPE >/dev/null 2>&1
            fi
        fi


        # backup all test results (configs, images and logs)
        if [ ${AUTO_TESTCASE[$i]} == "sdiommc" ] || [ ${AUTO_TESTCASE[$i]} == "kgdb_uart" ] ; then
            cp $IMAGE_DIR/vmImage $THIS_LOG/vmImage.${AUTO_TESTCASE[$i]}
        elif [ `echo ${AUTO_TESTCASE[$i]}|grep jffs2` ] ; then
            cp $IMAGE_DIR/vmImage $THIS_LOG/vmImage.${AUTO_TESTCASE[$i]}
            cp $IMAGE_DIR/rootfs.jffs2 $THIS_LOG/rootfs.jffs2.${AUTO_TESTCASE[$i]}
            cp $TESTSUITES_DIR/$TESTCASE_DIR/flash_images_log $THIS_LOG/flash_images_log.${AUTO_TESTCASE[$i]}
        elif [ `echo ${AUTO_TESTCASE[$i]}|grep audio_` ] ; then
            mv $TESTSUITES_DIR/audio/audio_data $THIS_LOG/audio_data.${AUTO_TESTCASE[$i]}
        fi

        if [ ${AUTO_TESTCASE[$i]} == "power_audio" ] ; then
            copy_image_config "power_${audio_dev}"
        else
            copy_image_config "${AUTO_TESTCASE[$i]}"
        fi

        mv $TESTSUITES_DIR/$TESTCASE_DIR/*_log  $THIS_LOG


        # If bellow test fails, patch is still cleaned here.
        if [ ${AUTO_TESTCASE[$i]} == "dhrystone" ] || [ ${AUTO_TESTCASE[$i]} == "whetstone" ] ; then
            cd $SRC_ROOT/package/
            git checkout .
        fi

        echo  "End testing ${AUTO_TESTCASE[$i]}..."
        sleep 10

        if [ $RESET_BOARD -eq 1 ] ; then
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
            sleep 10
        fi

    fi

done


######################################### SERIAL TEST #########################################

if [ ${AUTO_RUN_STATUS[$((n+1))]} -eq 1 ] ; then
    echo "Start testing serial..."

    rm -fr /tftpboot/uImage.serial*

    use_output_bak
    cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

    cd $TESTSUITES_DIR/serial
    ./build_serial_kernel.exp $BOARD_TYPE >/dev/null 2>&1

    # run this test only when two images exist
    if [ -f /tftpboot/uImage.serial.no_tty ] ; then
        cp /tftpboot/uImage.serial.no_tty $THIS_LOG
        ./serial_test.exp $BOARD_TYPE >/dev/null 2>&1
    else
        echo "$0:   Error, failed."
        tail -50 ./build_serial_kernel_log
    fi

    copy_image_config "serial"
    mv $TESTSUITES_DIR/serial/*_log  $THIS_LOG

    echo  "End testing serial..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

fi

######################################### SERIAL UART TEST #########################################

if [ ${AUTO_RUN_STATUS[$((n+9))]} -eq 1 ] ; then
    echo "Start testing serial uart..."

    rm -fr /tftpboot/uImage.serial*

    use_output_bak
    cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

    cd $TESTSUITES_DIR/serial
    ./build_uart_kernel.exp $BOARD_TYPE serial_uart >/dev/null 2>&1

    if [ ! -f $IMAGE_DIR/uImage ] ; then
        echo "$0:   Error, failed."
        tail -50 ./build_uart_kernel_log
    else
       ./uart_test.exp $BOARD_TYPE serial_uart >/dev/null 2>&1
    fi

    copy_image_config "serial_uart"
    mv $TESTSUITES_DIR/serial/*_log  $THIS_LOG

    echo  "End testing serial uart..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

fi

######################################### TIMER TEST #########################################

if [ ${AUTO_RUN_STATUS[$((n+4))]} -eq 1 ] ; then
    echo "Start testing timer..."

    rm -fr /tftpboot/uImage.timer*

    use_output_bak
    cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

    cd $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+4))]}

    # Test timer freqency 100
    ./build_${AUTO_TESTCASE[$((n+4))]}_kernel.exp $BOARD_TYPE 100 >/dev/null 2>&1
    ./${AUTO_TESTCASE[$((n+4))]}_test.exp $BOARD_TYPE 100 >/dev/null 2>&1
    copy_image_config "timer100"
    mv $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+4))]}/*_log  $THIS_LOG/timer100_test_log

    # Test timer freqency 250
    ./build_${AUTO_TESTCASE[$((n+4))]}_kernel.exp $BOARD_TYPE 250 >/dev/null 2>&1
    ./${AUTO_TESTCASE[$((n+4))]}_test.exp $BOARD_TYPE 250 >/dev/null 2>&1
    copy_image_config "timer250"
    mv $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+4))]}/*_log  $THIS_LOG/timer250_test_log

    # Test timer freqency 1000
    ./build_${AUTO_TESTCASE[$((n+4))]}_kernel.exp $BOARD_TYPE 1000 >/dev/null 2>&1
    ./${AUTO_TESTCASE[$((n+4))]}_test.exp $BOARD_TYPE 1000 >/dev/null 2>&1
    copy_image_config "timer1000"
    mv $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+4))]}/*_log  $THIS_LOG/timer1000_test_log

    echo  "End testing timer..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

fi


######################################### ETHERNET USB TEST #########################################

if [ ${AUTO_RUN_STATUS[$((n+3))]} -eq 1 ] ; then
    echo "Start testing ethernet_usb..."

    use_output_bak
    cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

    cd $TESTSUITES_DIR/ethernet
    ./build_ethernet_kernel.exp $BOARD_TYPE >/dev/null 2>&1
    mv build_ethernet_kernel_log build_ethernet_usb_kernel_log

    if [ ! -f $IMAGE_DIR/uImage ] ; then
        echo "$0:   Error, failed."
        tail -50 ./build_ethernet_usb_kernel_log
    else
        ./ethernet_test.exp $BOARD_TYPE usb >/dev/null 2>&1
        mv ethernet_test_log ethernet_usb_test_log
    fi

    copy_image_config "ethernet_usb"
    mv $TESTSUITES_DIR/ethernet/*_log  $THIS_LOG

    echo  "End testing ethernet_usb..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

fi


##################################### USB GADGET DEVICE TEST #####################################

if [ ${AUTO_RUN_STATUS[$((n+5))]} -eq 1 ] ; then
    TARGET_MUSB_MODE="dma pio"
    for config in $TARGET_MUSB_MODE
    do

        CONFIG=`echo $config|tr 'a-z' 'A-Z'`
        echo "Start testing usb gadget device in $config mode..."

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        cd $TESTSUITES_DIR/usbdev
        ./build_usbdev_kernel.exp $BOARD_TYPE $config >/dev/null 2>&1

        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "$0:   Error, failed."
            tail -50 ./build_usbdev_${config}_kernel_log
        else
            if [ $RESET_BOARD -eq 1 ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                sleep 10
            fi

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_zero_control_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_fs_control_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_zero_bulk_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_fs_bulk_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_ethernet_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_serial_generic_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_serial_linuxACM_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_storage_ram_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

            sleep 30
            cd $TESTSUITES_DIR/usbdev
            ./gadget_storage_hd_test.exp $BOARD_TYPE $config >/dev/null  2>&1
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1

        fi

        copy_image_config "usbdev.$config"
        mv $TESTSUITES_DIR/usbdev/*_log  $THIS_LOG

        echo "End testing usb gadget device..."
        sleep 10

        if [ $RESET_BOARD -eq 1 ] ; then
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
            sleep 10
        fi

    done
fi


##################################### USB HOST TEST #####################################

if [ ${AUTO_RUN_STATUS[$((n+7))]} -eq 1 ] ; then
    TARGET_MUSB_MODE="dma pio"
    for config in $TARGET_MUSB_MODE
    do

        CONFIG=`echo $config|tr 'a-z' 'A-Z'`
        echo "Start testing usb host device in $config mode..."

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        cd $TESTSUITES_DIR/usbhost
        ./build_usbhost_kernel.exp $BOARD_TYPE $config >/dev/null 2>&1

        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "$0:   Error, failed."
            tail -50 ./build_usbhost_${config}_kernel_log
        else
            ./usbhost_test.exp $BOARD_TYPE $config >/dev/null  2>&1
        fi

        copy_image_config "usbhost.$config"
        mv $TESTSUITES_DIR/usbhost/*_log  $THIS_LOG

        echo "End testing usb host device..."
        sleep 10

        if [ $RESET_BOARD -eq 1 ] ; then
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
            sleep 10
        fi

    done
fi


######################################### USB OTG TEST #########################################

if [ ${AUTO_RUN_STATUS[$((n+8))]} -eq 1 ] ; then

    if [ ${AUTO_RUN_STATUS[$((n+7))]} -eq 1 ] ; then
        OTG_mode=usbhost
    elif [ ${AUTO_RUN_STATUS[$((n+5))]} -eq 1 ] ; then
        OTG_mode=usbdev
    fi

    TARGET_MUSB_MODE="dma pio"
    for config in $TARGET_MUSB_MODE
    do

        CONFIG=`echo $config|tr 'a-z' 'A-Z'`
        echo "Start testing usbotg in $config mode with $OTG_mode..."

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        cd $TESTSUITES_DIR/usbotg
        ./build_usbotg_kernel.exp $BOARD_TYPE $config >/dev/null 2>&1

        if [ ! -f $IMAGE_DIR/uImage ] ; then
            echo "$0:   Error, failed."
            tail -50 ./build_usbotg_${config}_kernel_log
        else
            sleep 30
            cd $TESTSUITES_DIR/$OTG_mode

            if [ $OTG_mode = "usbhost" ] ; then
                ./usbhost_test.exp $BOARD_TYPE otg >/dev/null 2>&1
                mv usbhost_otg_test_log usbotg_host_${config}_test_log
            elif [ $OTG_mode = "usbdev" ] ; then
                ./gadget_zero_test.exp $BOARD_TYPE otg >/dev/null 2>&1
                mv gadget_zero_test_log usbotg_dev_${config}_test_log
            fi
        fi

        copy_image_config "usbotg"
        mv $TESTSUITES_DIR/$OTG_mode/*test_log  $THIS_LOG
        cp $TESTSUITES_DIR/usbotg/*_log  $THIS_LOG

        echo "End testing usbotg in $config mode with $OTG_mode..."
        sleep 10

        if [ $RESET_BOARD -eq 1 ] ; then
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
            sleep 10
        fi

    done
fi


##################################### XIP TEST #####################################

if [ ${AUTO_RUN_STATUS[$((n+11))]} -eq 1 ] ; then
    APP_FORMAT="fdpic shared-flat"
    SUB_TESTCASE="xip_userspace kernel_xip fs_xip"

    for sub_test in $SUB_TESTCASE
    do

        for format in $APP_FORMAT
        do
            FORMAT=`echo $format|tr 'a-z' 'A-Z'`
            echo "Start testing $sub_test in $format mode..."

            use_output_bak
            cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

            cd $TESTSUITES_DIR/xip
            ./build_${sub_test}_kernel.exp $BOARD_TYPE $format >/dev/null 2>&1

            if ( [ $sub_test == "xip_userspace" ] && [ ! -f $IMAGE_DIR/uImage ] ) || ( [ $sub_test == "kernel_xip" ] && [ ! -f $IMAGE_DIR/vmImage ] ) || ( [ $sub_test == "fs_xip" ] && ( [ ! -f $IMAGE_DIR/vmImage ] || [ ! -f $IMAGE_DIR/rootfs.romfs ] ) )
            then
                echo "$0:   Error, failed."
                tail -50 ./build_${sub_test}_${format}_kernel_log
            else
                ./${sub_test}_test.exp $BOARD_TYPE $format >/dev/null  2>&1
            fi

            copy_image_config "$sub_test.$format"
            if [ $sub_test == "xip_userspace" ] ; then
                mv /tftpboot/img.romfs $THIS_LOG/img.romfs.$sub_test.$format
                mv $IMAGE_DIR/vmImage $THIS_LOG/vmImage.$sub_test.$format
                cp -a $OUTPUT_DIR/target $THIS_LOG/romfs.$sub_test.$format
            elif [ $sub_test == "kernel_xip" ] ; then
                mv $IMAGE_DIR/vmImage $THIS_LOG/vmImage.$sub_test.$format
                cp -a $OUTPUT_DIR/target $THIS_LOG/romfs.$sub_test.$format
            elif [ $sub_test == "fs_xip" ] ; then
                mv $IMAGE_DIR/vmImage $THIS_LOG/vmImage.$sub_test.$format
                mv $IMAGE_DIR/rootfs.romfs $THIS_LOG/rootfs.romfs.$sub_test.$format
            fi

            mv $TESTSUITES_DIR/xip/*_log  $THIS_LOG

            echo "End testing $sub_test..."
            sleep 10

            if [ $RESET_BOARD -eq 1 ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                sleep 10
            fi
        done

    done

fi


##################################### OPROFILE TEST #####################################

if [ ${AUTO_RUN_STATUS[$((n+12))]} -eq 1 ] ; then
    APP_FORMAT="fdpic flat"

    for format in $APP_FORMAT
    do
        echo "Start testing oprofile in $format mode..."

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        cd $TESTSUITES_DIR/oprofile
        ./build_oprofile_kernel.exp $BOARD_TYPE $format >/dev/null 2>&1

        if [ ! -f $IMAGE_DIR/uImage ] ; then
            echo "$0:   Error, failed."
            tail -50 ./build_oprofile_${format}_kernel_log
        else
            ./oprofile_test.exp $BOARD_TYPE $format >/dev/null  2>&1
        fi

        copy_image_config "oprofile.$format"
        mv $TESTSUITES_DIR/oprofile/*_log  $THIS_LOG

        echo "End testing oprofile..."
        sleep 10

        if [ $RESET_BOARD -eq 1 ] ; then
            cd $TESTSUITES_DIR/common
            ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
            sleep 10
        fi
    done

fi



################# TEST KERNEL BOOT AND MOUNT JFFS2 FS FROM SPI FLASH ########################

if [ ${AUTO_RUN_STATUS[$((n+6))]} -eq 1  ] ; then
    echo  "Testing kernel boot and mount jffs2 file system from SPI flash ..."
    # Please set the chip selection to the 3rd one on bf533 and the 2rd on bf537 board.

    rm -fr /tftpboot/uImage.snormtd* /tftpboot/vmImage

    use_output_bak
    cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

    cd $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+6))]}
    ./build_${AUTO_TESTCASE[$((n+6))]}_kernel.exp $BOARD_TYPE >/dev/null 2>&1

    if [ ! -f $IMAGE_DIR/uImage ] || [ ! -f $IMAGE_DIR/vmImage ] ; then
        echo "$0:   Error, failed."
        tail -50 ./build_snormtd*kernel_log
    else
        ./${AUTO_TESTCASE[$((n+6))]}_test.exp $BOARD_TYPE >/dev/null 2>&1
        sleep 30
        ./spi_flash_images.exp $BOARD_TYPE >/dev/null 2>&1
        if [ $? == 0 ] ; then
            sleep 30
            ./snormtd_reboot_test.exp $BOARD_TYPE >/dev/null 2>&1
        fi
    fi

    copy_image_config "snormtd"
    mv $IMAGE_DIR/vmImage $THIS_LOG/vmImage.snormtd
    mv $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+6))]}/*_log  $THIS_LOG

    echo  "End testing snormtd..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

fi

#############################################################################################
#################### TEST SPI FLASH WITH DIFFERENT CONFIGS ##################################

  snormtd_ext_config=""

  if [ ${AUTO_RUN_STATUS[$((n+10))]} -eq 1 ] ; then
  snormtd_ext_config="pio ext"
  fi

  for config in "$snormtd_ext_config"
  do

  if [ -z $config ] ; then
  continue
  fi

  echo  "Testing from spi flash $config ..."
 # Please set the chip selection to the 3rd one on bf609 board.

  rm -fr /tftpboot/uImage.snormtd*

  # run ${AUTO_RUN_STATUS[$((n+10)) and ${AUTO_TESTCASE[$((n+6))]} with the same folder
  cd $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+6))]}

  ./build_${AUTO_TESTCASE[$((n+6))]}_kernel.exp $BOARD_TYPE $config  >/dev/null  2>&1
  sleep 30
  ./${AUTO_TESTCASE[$((n+6))]}_test.exp $BOARD_TYPE $config >/dev/null  2>&1
  sleep 30

  copy_image_config "snormtd_ext"
  mv $TESTSUITES_DIR/${AUTO_TESTCASE[$((n+6))]}/*_log  $THIS_LOG

  echo  "End testing snormtd ext..."
  sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

  done


######################################### TEST LTP #########################################

if [ ${AUTO_RUN_STATUS[$((n+2))]} -eq 1 ] ; then
    echo "Testing LTP..."

    ltp_args=( [0]="1" [1]="2" [2]="3" )
    ltp_suf=(slab slub slob)

    for i in 0 1 2
    do

        use_output_bak
	cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        echo "Test ltp with option ${ltp_suf[i]}"
	cd $TESTSUITES_DIR/ltp
        echo "./build_ltp_kernel.exp $BOARD_TYPE ${ltp_args[i]}"
        ./build_ltp_kernel.exp $BOARD_TYPE ${ltp_args[i]}> /dev/null 2>&1

        copy_image_config "ltp_${ltp_suf[i]}"

        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "Build kernel failed for ltp ${ltp_suf[i]} test"
            mv $TESTSUITES_DIR/ltp/build_ltp_kernel_log $THIS_LOG/build_ltp_kernel_log_${ltp_suf[i]}
        else
            # do if build kernel succeed
            echo "build_ltp_kernel.exp done"

            if [ $RESET_BOARD -eq 1 ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                sleep 10
            fi

	    start_time=`date +%s`
            cd $TESTSUITES_DIR/ltp
            ./ltp_auto_test.exp $BOARD_TYPE /dev/ttyS0 2 > /dev/null 2>&1
            echo "ltp_auto_test.exp done"
            ./ltp_compare_results_all.sh config/summary.base.$ARCH_TYPE $TESTSUITES_DIR/ltp/test/logs/summary.new >> ltp_test_log
            if [ $? == 1 ] ; then
                echo "ltp test fail"
                echo "LTP Test ............[FAIL]" >> ltp_test_log
            else
                echo "ltp test pass"
                echo "LTP Test ............[PASS]" >> ltp_test_log
            fi
	    end_time=`date +%s`
	    test_period=`expr $end_time - $start_time`
	    echo "Test Period is: $test_period seconds." >> ltp_test_log

            mv $TESTSUITES_DIR/ltp/build_ltp_kernel_log $THIS_LOG/build_ltp_kernel_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/test/logs/summary.new $THIS_LOG/ltp-summary_test_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/test/logs/ltp_auto_test*summary-log $THIS_LOG/
            mv $TESTSUITES_DIR/ltp/test/logs/detailed.new $THIS_LOG/ltp-detailed_test_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/test/logs/ltp_auto_test*detailed-log $THIS_LOG/
            mv $TESTSUITES_DIR/ltp/build_ltp_log $THIS_LOG/build_ltp_log_${ltp_suf[i]}
            mv $TESTSUITES_DIR/ltp/ltp_test_log $THIS_LOG/ltp_test_log_${ltp_suf[i]}

            sleep 30

            if [ $RESET_BOARD -eq 1 ] ; then
                cd $TESTSUITES_DIR/common
                ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
                sleep 10
            fi
            # end, do if build kernel succeed
        fi

    done

fi


################################# MANUAL TESTING #################################
for i in `seq 0 $n`
do

    if [ -z ${MANUAL_TESTCASE[$i]} ] ; then
        continue
    fi

    if [ ${MANUAL_RUN_STATUS[$i]} -eq 1  ] ; then

        use_output_bak
        cp $SRC_ROOT/config.user.policy $SRC_ROOT/.config

        echo  "Start testing ${MANUAL_TESTCASE[$i]}..."

        cd $TESTSUITES_DIR/${MANUAL_TESTCASE[$i]}

        ./build_${MANUAL_TESTCASE[$i]}_kernel.exp $BOARD_TYPE > /dev/null 2>&1

        if [ ! -f $IMAGE_DIR/uImage ]
        then
            echo "$0:   Error, failed."
            tail -50 ./build_${MANUAL_TESTCASE[$i]}*_kernel_log
        fi

        copy_image_config "${MANUAL_TESTCASE[$i]}"
        mv $TESTSUITES_DIR/${MANUAL_TESTCASE[$i]}/*_log  $THIS_LOG

    fi

    echo  "End testing ${MANUAL_TESTCASE[$i]}..."
    sleep 10

    if [ $RESET_BOARD -eq 1 ] ; then
        cd $TESTSUITES_DIR/common
        ./reset_board.exp $BOARD_TYPE > /dev/null 2>&1
        sleep 10
    fi

done


# Clean kernel source after one regression cycle is finished
# to avoid git problem in next cycle. Kernel patch will be deleted.
make_clean

# Clean all modifications to source code after all these tests.
cd $SRC_ROOT
git checkout .
cd $SRC_ROOT/linux/linux-kernel
git checkout .
cd $TESTSUITES_DIR
git checkout .

echo "Testing Done."
exit 0
