#!/usr/bin/expect

# This file couldn't be indepently executed.
# It is meant to be included into ***_test.exp scripts.

set uboot_flag 0
set timeout 8
send "\r"
while 1 {
    expect {
        -re "\[lL]ogin:" {
            sleep .5
            send "$login_user\r"
            continue
        }
        -re "\[Pp]assword:" {
            sleep .5
            send "$password\r"
            expect -re $kernel_prompt
            break
        }
        -re $kernel_prompt {
            break
        }
        -re $uboot_prompt {
            set uboot_flag 1
            break
        }
        timeout {
            send_user "Fail: no kernel response" 
            exit
        }
    }
}

if { $uboot_flag == 1 } {
    send "reset\r"
    send_user "sending reset\n"
} else {
    send "reboot\r"
    send_user "sending reboot\n"
}

set timeout 60
while 1 {
    expect {
        -re "RAM: +(\[0-9]+) Mi?B" {
            set ram_size $expect_out(1,string)
            send_user "\nRAM size is $ram_size MB\n"
        }
        "Hit any key " {
            send "\r"
            break
        }
        timeout {
            send_user "Fail to reboot the kernel into u-boot\n"
            break
        }
    }
}

expect -re $uboot_prompt
send -s "set console $console_args\r"
expect -re $uboot_prompt
send -s "set bootargs $bootargs\r"
expect -re $uboot_prompt
send -s "set serverip $serverip\r"
expect -re $uboot_prompt
send -s "set ipaddr $targetip\r"
expect -re $uboot_prompt
send -s "save\r"
expect -re $uboot_prompt

set bootcmd bootm
set bootaddr_low 0x1000000
set bootaddr_high 0x2000000

if { $ram_size <= 32 } {
    set bootaddr $bootaddr_low
} else {
    set bootaddr $bootaddr_high
}

send -s "tftpboot $bootaddr $boot_image\r"
while 1 {
    expect {
        -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
            set image_size $expect_out(1,string)
            send_user "Image size is $image_size\n"
            break
        }

        timeout {
            send_user "Fail to tftp download linux image."
            #if tftpboot from high bootaddr failed, try to reload image from low bootaddr
            break
        }
    }
}

expect ">"
send -s "run addip\r"
expect ">"
send -s "$bootcmd\r"

send -s "run bootcmd\r"
set timeout 180
while 1 {
    expect {
        -re "login:" {
            set timeout 15
            send "root\r"
            expect -re $kernel_prompt
            send_log "successful boot attempt"
            break
        }

        -re "Linux version (\[^\(\)]+) \\\(" {
            set linux_version $expect_out(1,string)
        }

        -re "gcc version (.*\\\(.*\\\)) \\\)" {
            set gcc_version $expect_out(1,string)
        }

        -re "(Trace:.*\r\n\r\n)|(Kernel panic)" {
            expect -re $kernel_prompt
            send_user "\nKernel booting up with dump info or panic\n"
            send_log "\n$TITLE ............\[FAIL\]\n"
            exit
        }

        timeout {
            send_user "Reboot the linux kernel timeout!\n"
            break
        }
    }
}

set timeout 10
send "ifconfig $eth_dev $targetip\r"
while 1 {
    expect {
        -re "$eth_dev: link up" {
            sleep 2
            break
        }
        timeout {
            break
        }
    }
}

set timeout 10
send "cat /proc/version\r"
while 1 {
    expect {
        -re $kernel_prompt {
            sleep 2
            break
        }
        timeout {
            send_user "Fail to read version info\n"
            break
        }
    }
}

send_user "\nLinux version: $linux_version\n"
send_user "GCC version: $gcc_version\n"
