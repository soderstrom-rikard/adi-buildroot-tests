#!/bin/sh

# exits with 0 ,pass, 
# exits with 1 ,fail.

# Give two .sum files to compare them
if [ "$2" = "" ]; then
	echo "Usage: $0 lastrun/test_summary thisrun/test_summary" >&2
	exit 2
fi

if [ ! -d $1 ] && [ ! -d $2 ] ; then
        echo "$1 and $2 doesn't exist!"
        exit 2
fi

if [ -d $1 ] && [ ! -d $2 ] ; then
        echo "$1 exists, but $2 doesn't exist!"
        exit 2
fi

if [ ! -d $1 ] && [ -d $2 ] ; then
        echo "$1 doesn't exist! $2 exists."
        exit 0 
fi

if [ -e $1/test_results ] && [ -e $2/test_results ] ; then 
   lastrun_test_results=`cat $1/test_results | grep -E "^exit=" | awk  'BEGIN { FS="[.=]" } {print $2 }'`
   thisrun_test_results=`cat $2/test_results | grep -E "^exit=" | awk  'BEGIN { FS="[.=]" } {print $2 }'`

if [ $thisrun_test_results -ge 1 ] ; then 
       if [ $thisrun_test_results -eq $lastrun_test_results ] ; then
           echo "test results are the same as last time!"
           exit 0
       else
           echo "thisrun test results are $thisrun_test_results! lastrun test results are $lastrun_test_results."
           exit 1    
       fi

else

exit_status=0
tmp1=/tmp/testing.$$a
tmp2=/tmp/testing.$$b


FILE=build_kernel_fail_log

if [ -s $1/$FILE ] && [ -s $2/$FILE ] ;then

   cat $1/$FILE | sort > $tmp1
   
   cat $2/$FILE | sort | comm -13 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
   	echo "Building kernel that now fail, but passed before:"
   	echo " "
   	cat $tmp2
        echo  " "
   	exit_status=1
   fi
   
   cat $2/$FILE | sort | comm -23 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
           echo "Building kernel that now works, but failed before:"
           echo  " "
           cat $tmp2
           echo  " "
   fi
else
 [ -s $1/$FILE ] || { echo "Empty file: $1/$FILE ." && echo "No compare for $FILE .";} 
 [ -s $2/$FILE ] || { echo "Empty file: $2/$FILE .";}
fi

FILE=fail_summary

if [ -s $1/$FILE ] && [ -s $2/$FILE ] ;then

   cat $1/$FILE | sort > $tmp1
   
   cat $2/$FILE | sort | comm -13 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
           echo "Tests that now fail, but pass before:"
           echo  " "
           cat $tmp2
           echo  " "
           exit_status=1
   fi
   
   cat $1/$FILE | sort > $tmp1
   
   cat $2/$FILE | sort | comm -23 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
           echo "Tests that are newly fixed:"
           echo  " "
           cat $tmp2
           echo  " "
   fi

else
 [ -s $1/$FILE ] || { echo "Empty file: $1/$FILE ." && echo "No compare for $FILE .";}
 [ -s $2/$FILE ] || { echo "Empty file: $2/$FILE .";} 
fi

FILE=pass_summary

if [ -s $1/$FILE ] && [ -s $2/$FILE ] ;then

   cat $1/$FILE | sort > $tmp1
   
   cat $2/$FILE | sort | comm -13 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
           echo "New pass tests:"
           echo  " "
           cat $tmp2
           echo  " "
   fi
   
   cat $1/$FILE | sort > $tmp1
   
   cat $2/$FILE | sort | comm -23 $tmp1 - > $tmp2
   
   grep -s . $tmp2 >/dev/null
   if [ $? = 0 ]; then
           echo "Pass tests that are disappearing:"
           echo  " "
           cat $tmp2
           echo  " "
           exit_status=1
   fi

else
 [ -s $1/$FILE ] || { echo "Empty file: $1/$FILE ." && echo "No compare for $FILE .";}
 [ -s $2/$FILE ] || { echo "Empty file: $2/$FILE .";}
fi

if [ $exit_status = 0 ] ; then
echo "The difference needs no extra notice."
fi

rm -rf /tmp/testing.$$a /tmp/testing.$$b

echo $exit_status
exit $exit_status

fi
fi
