#!/usr/bin/expect
#
# Test of bluetooth through uart port
#
# Usage:
#   ./bluetoothuart_test.exp board_type
#
# Example:
#   ./bluetoothuart_test.exp BF537-STAMP
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit"
source ../common/spawn_kermit.exp

step "Boot kernel"
source ../common/kernel_boot.exp

step "Start testing"
set case_num 0
set SLV_BD_ADDR	"00:15:83:44:C2:E7"
set uart_port   "ttyBF1"

incr case_num
set timeout 15
send "dbus-daemon --system --nofork &\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "ps|grep dbus-daemon\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "dbus.*dbus-daemon.*nofork.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "bluetoothd -n &\r"
while 1 {
    expect {
        -re "Bluetooth Management interface initialized.*device" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "ps |grep bluetoothd\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "bluetoothd -n.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

# If iwrap_boot utility is provided, use command "iwrap_boot -b /dev/ttyBF1" to set up tty;
# Instead of using iwrap_boot utility, you can also setup tty and cat 'boot 1' into the serial tty device;
incr case_num
set timeout 15
send "stty -F /dev/$uart_port ispeed 115200 ospeed 115200 cs8 -cstopb clocal -crtscts -parodd\r"
send "echo \"boot 1\" > /dev/$uart_port\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 30
send "hciattach -n /dev/$uart_port bcsp &\r"
while 1 {
    expect {
        -re "(\[dD]one|\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "hci0 has been enabled" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "hciconfig\r"
while 1 {
    expect {
        -re "(\[dD]one|\[fF]ail|DOWN|not found).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "hci0.*UART.*BD Address: (\[0-9A-F:]+)  ACL MTU.*$kernel_prompt" {
            set MST_BD_ADDR $expect_out(1,string)
            send_user "Get BD Address $MST_BD_ADDR\r"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "hciconfig hci0 up\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 2

incr case_num
set timeout 300
send "hcitool scan\r"
while 1 {
    expect {
        -re "Inquiry failed: Success|not found" {
            case_fail $case_num
        }
        -re "$SLV_BD_ADDR.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 30
send "hcitool -i hci0 info $SLV_BD_ADDR\r"
sleep 2
while 1 {
    expect {
        -re "not found" {
            case_fail $case_num
        }
        -re "$SLV_BD_ADDR.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "l2ping -i hci0 -c 50 -f $SLV_BD_ADDR\r"
while 1 {
    expect {
        -re "not found|Can't connect:" {
            case_fail $case_num
        }
        -re "50 sent, 50 received, 0% loss" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
