#!/usr/bin/expect --
#
# Build script for bluetooth uart test
#
# Usage:
#   ./build_bluetoothuart_kernel.exp board_type
#
# Example:
#   ./build_bluetoothuart_kernel.exp BF537-STAMP
#

source ../common/kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $src_root/testsuites/common
step "Make default config"
source make_default_config.exp

#if { $arch == "blackfin" } {
#    if [ catch { exec grep BR2_BFIN.*FLAT=y $src_root/.config } ] {
#        set binary_flat 0
#    } else {
#        set binary_flat 1
#    }
#} else {
#    set binary_flat "NA"
#}
#send_user "\n#### binary_flat is $binary_flat. ####\n"


# Toolchain configuration has changed, so needs to put user space
# configuration before kernel configuration
step "user space config for prerequisite"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

# bluez_utils requires WCHAR
        -re "Toolchain has WCHAR support.*BR2_TOOLCHAIN_EXTERNAL_WCHAR.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

# Toolchain configuration has changed, so better to make clean
# before kernel configuration. We have make clean in script 
# make_bfin-format.exp already.


# Command source_args can pass arguments while running source.
# Send bfin binary formats as argument for make_bfin-format.exp,
# and change to the specified bfin binary formats.
# It won't change formats for arm.
# make clean and source make_default_config.exp are already included.
cd $src_root/testsuites/common
step "Make config for specified bfin format"
source_args make_bfin-format.exp fdpic


step "Make kernel config"
cd $src_root
set timeout 300
spawn make linux-config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

# Bluetooth driver
        -re "Networking support \\\(NET\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Bluetooth subsystem support.*BT.*\\\[.*]" {
            send "Y\r"
        }

        -re "L2CAP protocol support.*BT_L2CAP.*\\\[.*]" {
            send "Y\r"
        }

        -re "SCO links support.*BT_SCO.*\\\[.*]" {
            send "Y\r"
        }

        -re "RFCOMM protocol support.*BT_RFCOMM.*\\\[.*]" {
            send "Y\r"
        }

        -re "RFCOMM TTY support.*BT_RFCOMM_TTY.*\\\[.*]" {
            send "Y\r"
        }

        -re "BNEP protocol support.*BT_BNEP.*\\\[.*]" {
            send "Y\r"
        }

        -re "Multicast filter support.*BT_BNEP_MC_FILTER.*\\\[.*]" {
            send "Y\r"
        }

        -re "Protocol filter support.*BT_BNEP_PROTO_FILTER.*\\\[.*]" {
            send "Y\r"
        }

        -re "HIDP protocol support.*BT_HIDP.*\\\[.*]" {
            send "Y\r"
        }

        -re "HCI UART driver \\\(BT_HCIUART\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "UART \\\(H4\\\) protocol support.*BT_HCIUART_H4.*\\\[.*]" {
            send "Y\r"
        }

        -re "BCSP protocol support.*BT_HCIUART_BCSP.*\\\[.*]" {
            send "Y\r"
        }

        -re "HCILL protocol support.*BT_HCIUART_LL.*\\\[.*]" {
            send "N\r"
        }

        -re "Enable UART1.*SERIAL_BFIN_UART1.*\\\[.*]" {
            send "Y\r"
        }

        -re "($anomalous_option) \\\[\[^\]]+/.]" {
            send "\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

step "user space config"
cd $src_root
set timeout 300
spawn make config
while 1 {
    expect {
        -nocase -re "\\\[\[^\r]*] (\\\(new\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "dbus \\\(BR2_PACKAGE_DBUS\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "bluez-utils \\\(BR2_PACKAGE_BLUEZ_UTILS\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "bccmd support.*BR2_PACKAGE_BLUEZ_UTILS_BCCMD.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            send_user "\nEnd of configuration\n"
            break
        }

        timeout {
            send_user "\n\nFATAL ERROR: config prompt timeout in make config\n"
            exit
        }
    }
}

cd $src_root/testsuites/common
step "Make"
source make_kernel.exp

cd $src_root/testsuites/common
step "Copy image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
